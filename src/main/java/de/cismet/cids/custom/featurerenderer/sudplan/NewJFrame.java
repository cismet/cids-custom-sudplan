/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2011 mscholl
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * NewJFrame.java
 *
 * Created on Feb 2, 2011, 12:40:57 PM
 */
package de.cismet.cids.custom.featurerenderer.sudplan;

import org.openide.util.Exceptions;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import java.lang.reflect.Field;

import java.util.Properties;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.featurerenderer.CustomCidsFeatureRenderer;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class NewJFrame extends javax.swing.JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form NewJFrame.
     */
    public NewJFrame() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        jProgressBar1.setValue(0);
        jProgressBar1.setIndeterminate(true);

        try {
            final TimeseriesFeatureRenderer rend = new TimeseriesFeatureRenderer();
            jPanel1.add(rend, BorderLayout.CENTER);
            final Field field = CustomCidsFeatureRenderer.class.getDeclaredField("cidsBean");
            field.setAccessible(true);
            field.set(rend, new MutableBean());
            rend.assign();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        final org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                layout.createSequentialGroup().add(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                        layout.createSequentialGroup().add(110, 110, 110).add(
                            jProgressBar1,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(
                        layout.createSequentialGroup().addContainerGap().add(
                            jPanel1,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            370,
                            Short.MAX_VALUE))).addContainerGap()));
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                org.jdesktop.layout.GroupLayout.TRAILING,
                layout.createSequentialGroup().addContainerGap().add(
                    jPanel1,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    234,
                    Short.MAX_VALUE).add(18, 18, 18).add(
                    jProgressBar1,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap()));

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  args  the command line arguments
     */
    public static void main(final String[] args) {
        final Properties p = new Properties();
        p.put("log4j.appender.Remote", "org.apache.log4j.net.SocketAppender");
        p.put("log4j.appender.Remote.remoteHost", "localhost");
        p.put("log4j.appender.Remote.port", "4445");
        p.put("log4j.appender.Remote.locationInfo", "true");
        p.put("log4j.rootLogger", "ALL,Remote");
        org.apache.log4j.PropertyConfigurator.configure(p);
        final NewJFrame frame = new NewJFrame();
        java.awt.EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    frame.init();
                    frame.setVisible(true);
                }
            });

        final Thread repainter = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        try {
                            Thread.sleep(1000);
                            EventQueue.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        frame.pack();
                                        frame.repaint();
                                        frame.getContentPane().repaint();
                                    }
                                });
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                    }
                });
//        repainter.start();
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private static final class MutableBean extends CidsBean {

        //~ Methods ------------------------------------------------------------

        @Override
        public Object getProperty(final String name) {
            return "tstb:SOS-SUDPLAN-Dummy@http://dummy.org?"
                        + "ts:procedure=urn:ogc:object:LINZ:rain:1&"
                        + "ts:feature_of_interest=urn:MyOrg:feature:linz&"
                        + "ts:observed_property=urn:ogc:def:property:OGC:rain&"
                        + "ts:offering=Station_3202_30min";
        }
    }
}
