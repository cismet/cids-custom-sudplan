/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.rainfall;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.Cursor;
import java.awt.EventQueue;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import java.util.Arrays;

import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import de.cismet.cids.custom.sudplan.DownscalingScenario;
import de.cismet.cids.custom.sudplan.commons.SudplanConcurrency;

import de.cismet.tools.BrowserLauncher;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public final class RainfallDownscalingVisualPanelScenarios extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    /** LOGGER. */
    private static final transient Logger LOG = Logger.getLogger(RainfallDownscalingVisualPanelScenarios.class);

    //~ Instance fields --------------------------------------------------------

    private final transient RainfallDownscalingWizardPanelScenarios model;
    private final transient ListSelectionListener listL;
    private final transient MouseListener descL;

    private transient LoadingIndicator li;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDescriptionValue;
    private javax.swing.JLabel lblScenarios;
    private javax.swing.JList lstScenarios;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form RainfallDownscalingVisualPanelScenarios.
     *
     * @param  model  DOCUMENT ME!
     */
    public RainfallDownscalingVisualPanelScenarios(final RainfallDownscalingWizardPanelScenarios model) {
        this.model = model;
        this.listL = new ListSelectionListenerImpl();
        this.descL = new DescriptionClickListener();

        // name of the wizard step
        this.setName(NbBundle.getMessage(
                RainfallDownscalingVisualPanelScenarios.class,
                "RainfallDownscalingVisualPanelScenarios.this.name")); // NOI18N

        initComponents();

        lstScenarios.addListSelectionListener(WeakListeners.create(ListSelectionListener.class, listL, lstScenarios));
        lblDescriptionValue.addMouseListener(WeakListeners.create(MouseListener.class, descL, lblDescriptionValue));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    String getSelectedScenario() {
        return (String)lstScenarios.getSelectedValue();
    }

    /**
     * DOCUMENT ME!
     *
     * @throws  IllegalStateException  DOCUMENT ME!
     */
    void init() {
        if (li != null) {
            li.stopIt();
            try {
                li.join();
            } catch (final InterruptedException ex) {
                throw new IllegalStateException("cannot wait for the loading indicator to join", ex); // NOI18N
            }

            li = null;
        }

        final String[] scenarios = model.getScenarios();
        final DefaultListModel listModel = (DefaultListModel)lstScenarios.getModel();
        listModel.clear();

        if ((scenarios == null) || (scenarios.length == 0)) {
            listModel.addElement("Loading from SPS ...");
            lstScenarios.setEnabled(false);

            li = new LoadingIndicator();
            SudplanConcurrency.getSudplanGeneralPurposePool().execute(li);
        } else {
            lstScenarios.setEnabled(true);
            Arrays.sort(scenarios);
            for (final String scenario : scenarios) {
                listModel.addElement(scenario);
            }

            if (model.getScenario() != null) {
                lstScenarios.setSelectedValue(model.getScenario(), true);
            }
            // FIXME: atr preselect hack
            else {
                lstScenarios.setSelectedIndex(0);
            }

            model.fireChangeEvent();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblScenarios = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstScenarios = new javax.swing.JList();
        lblDescriptionValue = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767));

        setMinimumSize(new java.awt.Dimension(200, 150));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(450, 300));
        setLayout(new java.awt.GridBagLayout());

        lblScenarios.setText(NbBundle.getMessage(
                RainfallDownscalingVisualPanelScenarios.class,
                "RainfallDownscalingVisualPanelScenarios.lblScenarios.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        add(lblScenarios, gridBagConstraints);

        jScrollPane1.setMaximumSize(new java.awt.Dimension(32767, 96));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(260, 96));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(260, 96));

        lstScenarios.setModel(new DefaultListModel());
        lstScenarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstScenarios);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 20, 20, 20);
        add(jScrollPane1, gridBagConstraints);

        lblDescriptionValue.setText(NbBundle.getMessage(
                RainfallDownscalingVisualPanelScenarios.class,
                "RainfallDownscalingVisualPanelScenarios.lblDescriptionValue.text"));        // NOI18N
        lblDescriptionValue.setToolTipText(NbBundle.getMessage(
                RainfallDownscalingVisualPanelScenarios.class,
                "RainfallDownscalingVisualPanelScenarios.lblDescriptionValue.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 20, 20);
        add(lblDescriptionValue, gridBagConstraints);

        lblDescription.setText(NbBundle.getMessage(
                RainfallDownscalingVisualPanelScenarios.class,
                "RainfallDownscalingVisualPanelScenarios.lblDescription.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 20);
        add(lblDescription, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler1, gridBagConstraints);
    }                                                                            // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class DescriptionClickListener extends MouseAdapter {

        //~ Methods ------------------------------------------------------------

        @Override
        public void mouseEntered(final MouseEvent e) {
            lblDescriptionValue.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }

        @Override
        public void mouseExited(final MouseEvent e) {
            lblDescriptionValue.setCursor(null);
        }

        @Override
        public void mouseClicked(final MouseEvent e) {
            final String url = DownscalingScenario.getDetailLink(lstScenarios.getSelectedValue().toString());

            try {
                BrowserLauncher.openURL(url);
            } catch (final Exception ex) {
                LOG.warn("cannot open link", ex); // NOI18N
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class LoadingIndicator extends Thread {

        //~ Instance fields ----------------------------------------------------

        private transient boolean run = true;

        //~ Methods ------------------------------------------------------------

        /**
         * warning be sure not to call this from the runner thread or it will cause a deadlock.
         */
        void stopIt() {
            run = false;
        }

        /**
         * DOCUMENT ME!
         */
        @Override
        public void run() {
            long count = 0;
            while (run) {
                try {
                    Thread.sleep(300);
                } catch (InterruptedException ex) {
                    // skip
                }

                final StringBuilder sb = new StringBuilder("Loading from SPS ");
                for (int i = 0; i < (count % 4); ++i) {
                    sb.append('.');
                }

                EventQueue.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            if (run) {
                                final DefaultListModel listModel = (DefaultListModel)lstScenarios.getModel();
                                listModel.removeElementAt(0);
                                listModel.addElement(sb.toString());
                            }
                        }
                    });

                count++;
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ListSelectionListenerImpl implements ListSelectionListener {

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         *
         * @param  e  DOCUMENT ME!
         */
        @Override
        public void valueChanged(final ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                model.fireChangeEvent();

                final Object selectedValue = lstScenarios.getSelectedValue();

                if (selectedValue == null) {
                    lblDescriptionValue.setText(NbBundle.getMessage(
                            RainfallDownscalingVisualPanelScenarios.class,
                            "RainfallDownscalingVisualPanelScenarios.lblDescriptionValue.text")); // NOI18N
                } else {
                    final String scenario = lstScenarios.getSelectedValue().toString();
                    lblDescriptionValue.setText(DownscalingScenario.getHtmlDescription(scenario));
                }
            }
        }
    }
}
