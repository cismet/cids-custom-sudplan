/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.local.linz.wizard;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.contrib.ssl.EasySSLProtocolSocketFactory;
import org.apache.commons.httpclient.methods.InputStreamRequestEntity;
import org.apache.commons.httpclient.methods.PutMethod;
import org.apache.commons.httpclient.protocol.Protocol;
import org.apache.commons.httpclient.protocol.ProtocolSocketFactory;
import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;

import java.net.Authenticator;
import java.net.HttpURLConnection;
import java.net.PasswordAuthentication;
import java.net.URL;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import de.cismet.cids.custom.sudplan.TimeSeriesRemoteHelper;

import de.cismet.tools.CismetThreadPool;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public final class UploadWizardPanelUploadUI extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(UploadWizardPanelUploadUI.class);

    //~ Instance fields --------------------------------------------------------

    private final transient UploadWizardPanelUpload model;
    private SwmmUploader swmmUploader = null;
    private boolean running = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient javax.swing.JProgressBar progressBar = new javax.swing.JProgressBar();
    private final transient javax.swing.JButton uploadButton = new javax.swing.JButton();
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form RainfallDownscalingVisualPanelTargetDate.
     *
     * @param  model  DOCUMENT ME!
     */
    public UploadWizardPanelUploadUI(final UploadWizardPanelUpload model) {
        this.model = model;

        // name of the wizard step
        this.setName(NbBundle.getMessage(
                UploadWizardPanelUploadUI.class,
                "UploadWizardPanelUpload.this.name")); // NOI18N

        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        if (model.isUploadInProgress()) {
            LOG.warn("model run is still in progress");
        } else {
            this.uploadButton.setEnabled(!model.isUploadComplete() || model.isUploadErroneous());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setLayout(new java.awt.GridBagLayout());

        progressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.6;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        add(progressBar, gridBagConstraints);

        uploadButton.setText(org.openide.util.NbBundle.getMessage(
                UploadWizardPanelUploadUI.class,
                "UploadWizardPanelUploadUI.uploadButton.text")); // NOI18N
        uploadButton.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    uploadButtonActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weighty = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        add(uploadButton, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void uploadButtonActionPerformed(final java.awt.event.ActionEvent evt) //GEN-FIRST:event_uploadButtonActionPerformed
    {                                                                              //GEN-HEADEREND:event_uploadButtonActionPerformed

        if (this.swmmUploader != null) {
            LOG.warn("restarting previously canceled or erroneous upload");
        }

        if (model.isUploadInProgress()) {
            LOG.error("unexpected call to upload action, previous upload still in progress!");
            return;
        }

        LOG.info("uploading SWMM INP File '" + model.getInpFile() + "' to WebDAv at "
                    + "'" + UploadWizardAction.SWMM_WEBDAV_HOST + "'");

        this.swmmUploader = null;
        progressBar.setValue(0);

        try {
            final File inpFile = new File(model.getInpFile());
            progressBar.setMaximum((int)inpFile.length());

            swmmUploader = new SwmmUploader(inpFile);
            swmmUploader.addPropertyChangeListener(new UploadProgressListener());
            CismetThreadPool.execute(swmmUploader);
        } catch (Exception ex) {
            LOG.error("could not upload SWMM INP File '" + model.getInpFile() + "' to WebDAv at "
                        + "'" + UploadWizardAction.SWMM_WEBDAV_HOST + "': " + ex.getMessage(),
                ex);
            model.setUploadErroneous(true);
        }
    } //GEN-LAST:event_uploadButtonActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public UploadWizardPanelUpload getModel() {
        return this.model;
    }
    /**
     * DOCUMENT ME!
     *
     * @return   DOCUMENT ME!
     *
     * @throws   Exception  DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public OutputStream getInpFileOutputStream() throws Exception {
        if (LOG.isDebugEnabled()) {
            LOG.debug("connecting to SWMM Model Webdav Server '" + UploadWizardAction.SWMM_WEBDAV_HOST + "'");
        }

        try {
            // Wir basteln uns einen Certificat-Manager der alles erlaubt
            final TrustManager[] trustAllCerts = new TrustManager[] {
                    new X509TrustManager() {

                        @Override
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                            return null;
                        }

                        @Override
                        public void checkClientTrusted(final java.security.cert.X509Certificate[] certs,
                                final String authType) {
                            // No need to implement.
                        }

                        @Override
                        public void checkServerTrusted(final java.security.cert.X509Certificate[] certs,
                                final String authType) {
                            // No need to implement.
                        }
                    }
                };

            // Sag Java: wir vertrauen der Verbindung
            final SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            final URL url = new URL(UploadWizardAction.SWMM_WEBDAV_HOST);
            final HttpsURLConnection http = (HttpsURLConnection)url.openConnection();
            Authenticator.setDefault(new Authenticator() {

                    @Override
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(
                                UploadWizardAction.SWMM_WEBDAV_USER,
                                UploadWizardAction.SWMM_WEBDAV_PASSWORD.toCharArray());
                    }
                });

            http.setAllowUserInteraction(true);
            http.setRequestMethod("PUT");
            http.connect();

            return http.getOutputStream();
        } catch (Exception ex) {
            LOG.error("could not create connection to SWMM Model Webdav '"
                        + UploadWizardAction.SWMM_WEBDAV_HOST + "': " + ex.getMessage());

//            wizard.putProperty(
//                    WizardDescriptor.PROP_ERROR_MESSAGE,
//                    NbBundle.getMessage(UploadWizardPanelProject.class,
//                    "UploadWizardPanelUpload.isValid().error", ex.getLocalizedMessage()));

            throw ex;
        }
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class UploadProgressListener implements PropertyChangeListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void propertyChange(final PropertyChangeEvent evt) {
            if ("state".equals(evt.getPropertyName())
                        && (SwingWorker.StateValue.STARTED == evt.getNewValue())) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("SWMM Upload worker started");
                }
                model.setUploadInProgress(true);
                uploadButton.setEnabled(false);
            } else if ("state".equals(evt.getPropertyName())
                        && (SwingWorker.StateValue.DONE == evt.getNewValue())) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("SWMM Upload worker started");
                }
                model.setUploadComplete(true);
                uploadButton.setEnabled(false);
            } else if ("progress".equals(evt.getPropertyName())) {
                progressBar.setValue((Integer)evt.getNewValue());
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class SwmmUploader extends SwingWorker<Void, Void> {

        //~ Instance fields ----------------------------------------------------

        private final File inpFile;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new SwmmUploader object.
         *
         * @param   inpFile  inpFileInputStream DOCUMENT ME!
         *
         * @throws  Exception  DOCUMENT ME!
         */
        SwmmUploader(final File inpFile) throws Exception {
            this.inpFile = inpFile;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        protected Void doInBackground() throws Exception {
            final HttpClient httpClient = TimeSeriesRemoteHelper.createHttpClient(
                    UploadWizardAction.SWMM_WEBDAV_HOST,
                    new UsernamePasswordCredentials(
                        UploadWizardAction.SWMM_WEBDAV_USER,
                        UploadWizardAction.SWMM_WEBDAV_PASSWORD));

            final URL targetLocation = new URL(
                    UploadWizardAction.SWMM_WEBDAV_HOST
                            + inpFile.getName());

            final PutMethod putMethod = new PutMethod(targetLocation.toExternalForm());

            final InputStreamRequestEntity inputStreamRequestEntity = new InputStreamRequestEntity(
                    new FileInputStream(inpFile),
                    inpFile.length()) {
                };

            putMethod.setRequestEntity(inputStreamRequestEntity);

            final byte[] buf = new byte[4096];
            final int len;
//            while (!this.isCancelled() && ((len = inpFileInputStream.read(buf)) > 0)) {
//                inpFileOutputStream.write(buf, 0, len);
//            }

            if (this.isCancelled()) {
                model.setUploadCanceled(true);
                SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            uploadButton.setEnabled(true);
                            progressBar.setValue(0);
                        }
                    });
            }

            return null;
        }

        @Override
        protected void done() {
            try {
                get();
                // model.setUploadComplete(true);
            } catch (Exception ex) {
                LOG.error("error during executing upload of SWMM INP File '" + model.getInpFile() + "' to WebDAV at "
                            + "'" + UploadWizardAction.SWMM_WEBDAV_HOST + "': " + ex.getMessage(),
                    ex);

                model.setUploadErroneous(true);
                SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            progressBar.setValue(0);
                            uploadButton.setEnabled(true);
                        }
                    });
            }
        }
    }
}
