/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.airquality;

import com.vividsolutions.jts.geom.Coordinate;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import de.cismet.cismap.commons.CrsTransformer;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public final class AirqualityDownscalingVisualPanelBoundaries extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(AirqualityDownscalingVisualPanelBoundaries.class);

    //~ Instance fields --------------------------------------------------------

    private final transient AirqualityDownscalingWizardPanelBoundaries model;
    private final transient DocumentListener docL;

    private transient double deltaX;
    private transient double deltaY;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblLL;
    private javax.swing.JLabel lblLLComma;
    private javax.swing.JLabel lblLLLeftBrace;
    private javax.swing.JLabel lblLLRightBrace;
    private javax.swing.JLabel lblLR;
    private javax.swing.JLabel lblSrid;
    private javax.swing.JLabel lblSridValue;
    private javax.swing.JLabel lblUL;
    private javax.swing.JLabel lblUR;
    private javax.swing.JLabel lblURComma;
    private javax.swing.JLabel lblURLeftBrace;
    private javax.swing.JLabel lblURRightBrace;
    private javax.swing.JPanel pnlGrid;
    private javax.swing.JPanel pnlLL;
    private javax.swing.JPanel pnlLLCoord;
    private javax.swing.JPanel pnlLR;
    private javax.swing.JPanel pnlUL;
    private javax.swing.JPanel pnlUR;
    private javax.swing.JPanel pnlURCoord;
    private javax.swing.JTextField txtLLX;
    private javax.swing.JTextField txtLLY;
    private javax.swing.JTextField txtURX;
    private javax.swing.JTextField txtURY;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form AirqualityDownscalingVisualPanelBoundaries.
     *
     * @param  model  DOCUMENT ME!
     */
    public AirqualityDownscalingVisualPanelBoundaries(final AirqualityDownscalingWizardPanelBoundaries model) {
        this.model = model;
        this.docL = new DocumentListenerImpl();

        // name of the wizard step
        this.setName(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.this.name")); // NOI18N

        initComponents();

        txtLLX.getDocument().addDocumentListener(WeakListeners.document(docL, txtLLX.getDocument()));
        txtLLY.getDocument().addDocumentListener(WeakListeners.document(docL, txtLLY.getDocument()));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        final Coordinate ll = model.getLLCoordinate();
        final Coordinate ur = model.getURCoordinate();

        assert (ll != null) && (ur != null) : "coordinates must be set"; // NOI18N

        txtLLX.setText(String.valueOf(ll.x));
        txtLLY.setText(String.valueOf(ll.y));
        txtURX.setText(String.valueOf(ur.x));
        txtURY.setText(String.valueOf(ur.y));

        deltaX = ur.x - ll.x;
        deltaY = ur.y - ll.y;

        txtLLX.setCaretPosition(0);
        txtLLY.setCaretPosition(0);
        txtURX.setCaretPosition(0);
        txtURY.setCaretPosition(0);

        lblLR.setText(String.valueOf(model.getGridSize()));
        lblLL.setText(String.valueOf(model.getGridSize()));
        lblUR.setText(String.valueOf(model.getGridSize()));
        lblUL.setText(String.valueOf(model.getGridSize()));

        lblSridValue.setText(String.valueOf(CrsTransformer.getCurrentSrid()));

        model.fireChangeEvent();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    String getLLX() {
        return txtLLX.getText();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    String getLLY() {
        return txtLLY.getText();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    String getURX() {
        return txtURX.getText();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    String getURY() {
        return txtURY.getText();
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlGrid = new javax.swing.JPanel();
        pnlUL = new javax.swing.JPanel();
        lblUL = new javax.swing.JLabel();
        pnlUR = new javax.swing.JPanel();
        lblUR = new javax.swing.JLabel();
        pnlLL = new javax.swing.JPanel();
        lblLL = new javax.swing.JLabel();
        pnlLR = new javax.swing.JPanel();
        lblLR = new javax.swing.JLabel();
        pnlLLCoord = new javax.swing.JPanel();
        lblLLLeftBrace = new javax.swing.JLabel();
        txtLLX = new javax.swing.JTextField();
        lblLLComma = new javax.swing.JLabel();
        txtLLY = new javax.swing.JTextField();
        lblLLRightBrace = new javax.swing.JLabel();
        lblSrid = new javax.swing.JLabel();
        lblSridValue = new javax.swing.JLabel();
        pnlURCoord = new javax.swing.JPanel();
        lblURLeftBrace = new javax.swing.JLabel();
        txtURX = new javax.swing.JTextField();
        lblURComma = new javax.swing.JLabel();
        txtURY = new javax.swing.JTextField();
        lblURRightBrace = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(300, 100));
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        pnlGrid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255), 4));
        pnlGrid.setOpaque(false);
        pnlGrid.setLayout(new java.awt.GridBagLayout());

        pnlUL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        pnlUL.setMinimumSize(new java.awt.Dimension(100, 100));
        pnlUL.setOpaque(false);
        pnlUL.setLayout(new java.awt.BorderLayout());

        lblUL.setForeground(new java.awt.Color(0, 0, 255));
        lblUL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUL.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblUL.text")); // NOI18N
        pnlUL.add(lblUL, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlGrid.add(pnlUL, gridBagConstraints);

        pnlUR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        pnlUR.setMinimumSize(new java.awt.Dimension(100, 100));
        pnlUR.setOpaque(false);
        pnlUR.setLayout(new java.awt.BorderLayout());

        lblUR.setForeground(new java.awt.Color(0, 0, 255));
        lblUR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUR.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblUR.text")); // NOI18N
        pnlUR.add(lblUR, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlGrid.add(pnlUR, gridBagConstraints);

        pnlLL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        pnlLL.setMinimumSize(new java.awt.Dimension(100, 100));
        pnlLL.setOpaque(false);
        pnlLL.setLayout(new java.awt.BorderLayout());

        lblLL.setForeground(new java.awt.Color(0, 0, 255));
        lblLL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLL.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblLL.text")); // NOI18N
        pnlLL.add(lblLL, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlGrid.add(pnlLL, gridBagConstraints);

        pnlLR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        pnlLR.setMinimumSize(new java.awt.Dimension(100, 100));
        pnlLR.setOpaque(false);
        pnlLR.setLayout(new java.awt.BorderLayout());

        lblLR.setForeground(new java.awt.Color(0, 0, 255));
        lblLR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLR.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblLR.text")); // NOI18N
        pnlLR.add(lblLR, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlGrid.add(pnlLR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 38, 6, 38);
        add(pnlGrid, gridBagConstraints);

        pnlLLCoord.setOpaque(false);
        pnlLLCoord.setLayout(new java.awt.GridBagLayout());

        lblLLLeftBrace.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblLLLeftBrace.text")); // NOI18N
        pnlLLCoord.add(lblLLLeftBrace, new java.awt.GridBagConstraints());

        txtLLX.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.txtLLX.text")); // NOI18N
        txtLLX.setPreferredSize(new java.awt.Dimension(120, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        pnlLLCoord.add(txtLLX, gridBagConstraints);

        lblLLComma.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblLLComma.text")); // NOI18N
        pnlLLCoord.add(lblLLComma, new java.awt.GridBagConstraints());

        txtLLY.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.txtLLY.text")); // NOI18N
        txtLLY.setPreferredSize(new java.awt.Dimension(120, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        pnlLLCoord.add(txtLLY, gridBagConstraints);

        lblLLRightBrace.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblLLRightBrace.text")); // NOI18N
        pnlLLCoord.add(lblLLRightBrace, new java.awt.GridBagConstraints());

        lblSrid.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblSrid.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 17, 0, 0);
        pnlLLCoord.add(lblSrid, gridBagConstraints);

        lblSridValue.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblSridValue.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlLLCoord.add(lblSridValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(pnlLLCoord, gridBagConstraints);

        pnlURCoord.setOpaque(false);
        pnlURCoord.setLayout(new java.awt.GridBagLayout());

        lblURLeftBrace.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblURLeftBrace.text")); // NOI18N
        pnlURCoord.add(lblURLeftBrace, new java.awt.GridBagConstraints());

        txtURX.setEditable(false);
        txtURX.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.txtURX.text")); // NOI18N
        txtURX.setFocusable(false);
        txtURX.setPreferredSize(new java.awt.Dimension(120, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlURCoord.add(txtURX, gridBagConstraints);

        lblURComma.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblURComma.text")); // NOI18N
        pnlURCoord.add(lblURComma, new java.awt.GridBagConstraints());

        txtURY.setEditable(false);
        txtURY.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.txtURY.text")); // NOI18N
        txtURY.setFocusable(false);
        txtURY.setPreferredSize(new java.awt.Dimension(120, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlURCoord.add(txtURY, gridBagConstraints);

        lblURRightBrace.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelBoundaries.class,
                "AirqualityDownscalingVisualPanelBoundaries.lblURRightBrace.text")); // NOI18N
        pnlURCoord.add(lblURRightBrace, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        add(pnlURCoord, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class DocumentListenerImpl implements DocumentListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            try {
                final Double llx = Double.parseDouble(txtLLX.getText());
                final Double lly = Double.parseDouble(txtLLY.getText());

                txtURX.setText(String.valueOf(llx + deltaX));
                txtURY.setText(String.valueOf(lly + deltaY));

                txtURX.setCaretPosition(0);
                txtURY.setCaretPosition(0);
            } catch (final NumberFormatException ex) {
                LOG.warn("cannot adjust coordinates", ex); // NOI18N
            }

            model.fireChangeEvent();
        }
    }
}
