/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.airquality.emissionupload;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.Component;

import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

import de.cismet.cismap.commons.Crs;
import de.cismet.cismap.commons.interaction.CismapBroker;

/**
 * DOCUMENT ME!
 *
 * @author   jweintraut
 * @version  $Revision$, $Date$
 */
public class EmissionUploadVisualPanelEmissionScenario extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(EmissionUploadVisualPanelEmissionScenario.class);

    //~ Instance fields --------------------------------------------------------

    private transient EmissionUploadPanelEmissionScenario model;
    private transient DocumentListener changeModelNameListener;
    private transient DocumentListener changeModelDescriptionListener;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbSrs;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblEmissionScenarioName;
    private javax.swing.JLabel lblSrs;
    private javax.swing.JScrollPane scpDescription;
    private javax.swing.JTextArea txaDescription;
    private javax.swing.JTextField txtEmissionScenarioName;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form EmissionUploadVisualPanelEmissionScenario.
     *
     * @param  model  DOCUMENT ME!
     */
    public EmissionUploadVisualPanelEmissionScenario(final EmissionUploadPanelEmissionScenario model) {
        this.model = model;
        changeModelNameListener = new ChangeModelListener(true);
        changeModelDescriptionListener = new ChangeModelListener(false);

        initComponents();

        ((AbstractDocument)txtEmissionScenarioName.getDocument()).setDocumentFilter(new EmissionScenarioNameFilter());
        txtEmissionScenarioName.getDocument()
                .addDocumentListener(WeakListeners.document(
                        changeModelNameListener,
                        txtEmissionScenarioName.getDocument()));
        txaDescription.getDocument()
                .addDocumentListener(WeakListeners.document(
                        changeModelDescriptionListener,
                        txaDescription.getDocument()));

        for (final Crs crs : CismapBroker.getInstance().getMappingComponent().getCrsList()) {
            cmbSrs.addItem(crs);
        }

        cmbSrs.setSelectedIndex(0);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblEmissionScenarioName = new javax.swing.JLabel();
        txtEmissionScenarioName = new javax.swing.JTextField();
        lblDescription = new javax.swing.JLabel();
        scpDescription = new javax.swing.JScrollPane();
        txaDescription = new javax.swing.JTextArea();
        lblSrs = new javax.swing.JLabel();
        cmbSrs = new javax.swing.JComboBox();

        setName(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelEmissionScenario.class,
                "EmissionUploadVisualPanelEmissionScenario.name")); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        lblEmissionScenarioName.setLabelFor(txtEmissionScenarioName);
        lblEmissionScenarioName.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelEmissionScenario.class,
                "EmissionUploadVisualPanelEmissionScenario.lblEmissionScenarioName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblEmissionScenarioName, gridBagConstraints);

        txtEmissionScenarioName.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelEmissionScenario.class,
                "EmissionUploadVisualPanelEmissionScenario.txtEmissionScenarioName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtEmissionScenarioName, gridBagConstraints);

        lblDescription.setLabelFor(txaDescription);
        lblDescription.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelEmissionScenario.class,
                "EmissionUploadVisualPanelEmissionScenario.lblDescription.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblDescription, gridBagConstraints);

        txaDescription.setColumns(20);
        txaDescription.setRows(5);
        scpDescription.setViewportView(txaDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(scpDescription, gridBagConstraints);

        lblSrs.setLabelFor(cmbSrs);
        lblSrs.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelEmissionScenario.class,
                "EmissionUploadVisualPanelEmissionScenario.lblSrs.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblSrs, gridBagConstraints);

        cmbSrs.setRenderer(new CrsRenderer());
        cmbSrs.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cmbSrsActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cmbSrs, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cmbSrsActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cmbSrsActionPerformed
        model.setSrs((Crs)cmbSrs.getSelectedItem());
    }                                                                          //GEN-LAST:event_cmbSrsActionPerformed

    /**
     * DOCUMENT ME!
     */
    void init() {
        final String emissionScenarioName = model.getEmissionScenarioName();

        if (isValidEmissionScenarioName(emissionScenarioName)) {
            txtEmissionScenarioName.setText(emissionScenarioName);
        } else {
            txtEmissionScenarioName.setText(NbBundle.getMessage(
                    EmissionUploadVisualPanelEmissionScenario.class,
                    "EmissionUploadVisualPanelEmissionScenario.txtEmissionScenarioName.text")); // NOI18N
            txtEmissionScenarioName.selectAll();
            txtEmissionScenarioName.requestFocus();
        }
        cmbSrs.setSelectedItem(model.getSrs());
        txaDescription.setText(model.getDescription());
    }

    /**
     * DOCUMENT ME!
     *
     * @param   text  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    protected static boolean isValidEmissionScenarioName(final String text) {
        return (text != null) && text.matches("[0-9a-zA-Z_]{1,10}"); // NOI18N
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    protected class EmissionScenarioNameFilter extends DocumentFilter {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertString(final DocumentFilter.FilterBypass fb,
                final int offset,
                final String string,
                final AttributeSet attr) throws BadLocationException {
            final int length = ((fb.getDocument().getLength() + string) != null) ? string.length() : 0;

            if (isValidEmissionScenarioName(string) && (length <= 10)) {
                super.insertString(fb, offset, string, attr);
            }
        }

        @Override
        public void replace(final DocumentFilter.FilterBypass fb,
                final int offset,
                final int length,
                final String text,
                final AttributeSet attrs) throws BadLocationException {
            final int totalLength = (fb.getDocument().getLength() - length) + ((text != null) ? text.length() : 0);
            boolean replace = false;

            if ((text != null) && isValidEmissionScenarioName(text) && (totalLength <= 10)) {
                // The user replaces with new text, so we have to check this new text.
                replace = true;
            } else if ((text == null) && (totalLength > 0)) {
                // The user just deleted some text, so the name of the grid will still be valid.
                replace = true;
            }

            if (replace) {
                super.replace(fb, offset, length, text, attrs);
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    protected class ChangeModelListener implements DocumentListener {

        //~ Instance fields ----------------------------------------------------

        private final boolean name;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new ChangeModelListener object.
         *
         * @param  name  DOCUMENT ME!
         */
        public ChangeModelListener(final boolean name) {
            this.name = name;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            changeModel();
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            changeModel();
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            changeModel();
        }

        /**
         * DOCUMENT ME!
         */
        protected void changeModel() {
            if (name) {
                model.setEmissionScenarioName(txtEmissionScenarioName.getText());
            } else {
                model.setDescription(txaDescription.getText());
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    protected class CrsRenderer extends JLabel implements ListCellRenderer {

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new CrsRenderer object.
         */
        public CrsRenderer() {
            setOpaque(true);
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public Component getListCellRendererComponent(final JList list,
                final Object value,
                final int index,
                final boolean isSelected,
                final boolean cellHasFocus) {
            if (isSelected) {
                setBackground(UIManager.getDefaults().getColor("ComboBox.selectionBackground")); // NOI18N
                setForeground(UIManager.getDefaults().getColor("ComboBox.selectionForeground")); // NOI18N
            } else {
                setBackground(UIManager.getDefaults().getColor("ComboBox.background"));          // NOI18N
                setForeground(UIManager.getDefaults().getColor("ComboBox.foreground"));          // NOI18N
            }

            if (value instanceof Crs) {
                setText(((Crs)value).getName());
            } else {
                setText("Unknown CRS"); // NOI18N
            }

            return this;
        }
    }
}
