/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.airquality;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import java.util.Arrays;

import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import de.cismet.cids.custom.sudplan.DownscalingScenario;

import de.cismet.tools.BrowserLauncher;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public final class AirqualityDownscalingVisualPanelScenario extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(AirqualityDownscalingVisualPanelScenario.class);

    private static final transient DefaultListModel MODEL_LOADING = new DefaultListModel();

    static {
        MODEL_LOADING.addElement(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelScenario.class,
                "AirqualityDownscalingVisualPanelScenario.MODEL_LOADING")); // NOI18N
    }

    //~ Instance fields --------------------------------------------------------

    private final transient AirqualityDownscalingWizardPanelScenario model;
    private final transient ListSelectionListener changeModelListener;
    private final transient MouseListener descL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDescriptionValue;
    private javax.swing.JLabel lblScenarios;
    private javax.swing.JList lstScenarios;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form AirqualityDownscalingVisualPanelScenarios.
     *
     * @param  model  DOCUMENT ME!
     */
    public AirqualityDownscalingVisualPanelScenario(final AirqualityDownscalingWizardPanelScenario model) {
        this.model = model;
        changeModelListener = new ChangeModelListener();
        descL = new DescriptionClickListener();

        // name of the wizard step
        this.setName(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelScenario.class,
                "AirqualityDownscalingVisualPanelScenario.this.name")); // NOI18N

        initComponents();

        lstScenarios.addListSelectionListener(WeakListeners.create(
                ListSelectionListener.class,
                changeModelListener,
                lstScenarios));
        lblDescriptionValue.addMouseListener(WeakListeners.create(MouseListener.class, descL, lblDescriptionValue));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        // It's important to get the selected scenario before invoking the ListSelectionListener, e. g. by calling
        // clear(). The ListSelectionListener would reset the selected scenario.
        final String scenarioFromModel = model.getScenario();
        final String[] scenarios = model.getScenariosFromSPS();

        lstScenarios.setEnabled((scenarios != null) && (scenarios.length > 0));

        if ((scenarios == null) || (scenarios.length <= 0)) {
            lstScenarios.setModel(MODEL_LOADING);
            lstScenarios.clearSelection();
            return;
        } else {
            if ((lstScenarios.getModel() == null) || lstScenarios.getModel().equals(MODEL_LOADING)) {
                lstScenarios.setModel(new DefaultListModel());
            }
        }

        Arrays.sort(scenarios);

        final DefaultListModel listModel = (DefaultListModel)lstScenarios.getModel();
        listModel.clear();

        for (final String scenario : scenarios) {
            listModel.addElement(scenario);
        }

        if (scenarioFromModel == null) {
            lstScenarios.setSelectedIndex(0);
            model.setScenario((String)lstScenarios.getSelectedValue());
        } else {
            lstScenarios.setSelectedValue(scenarioFromModel, true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblScenarios = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstScenarios = new javax.swing.JList();
        lblDescription = new javax.swing.JLabel();
        lblDescriptionValue = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767));

        setMinimumSize(new java.awt.Dimension(200, 150));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(450, 300));
        setLayout(new java.awt.GridBagLayout());

        lblScenarios.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelScenario.class,
                "AirqualityDownscalingVisualPanelScenario.lblScenarios.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(lblScenarios, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(260, 96));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(260, 96));

        lstScenarios.setModel(new DefaultListModel());
        lstScenarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstScenarios);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

        lblDescription.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelScenario.class,
                "AirqualityDownscalingVisualPanelScenario.lblDescription.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(lblDescription, gridBagConstraints);

        lblDescriptionValue.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelScenario.class,
                "AirqualityDownscalingVisualPanelScenario.lblDescriptionValue.text"));        // NOI18N
        lblDescriptionValue.setToolTipText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelScenario.class,
                "AirqualityDownscalingVisualPanelScenario.lblDescriptionValue.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblDescriptionValue, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler1, gridBagConstraints);
    }                                                                                         // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ChangeModelListener implements ListSelectionListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void valueChanged(final ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                final Object selectedValue = lstScenarios.getSelectedValue();

                if (selectedValue == null) {
                    lblDescriptionValue.setText(NbBundle.getMessage(
                            AirqualityDownscalingVisualPanelScenario.class,
                            "AirqualityDownscalingVisualPanelScenario.lblDescriptionValue.text")); // NOI18N
                } else {
                    final String scenario = (String)selectedValue;
                    model.setScenario(scenario);
                    lblDescriptionValue.setText(DownscalingScenario.getHtmlDescription(scenario));
                }
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class DescriptionClickListener extends MouseAdapter {

        //~ Methods ------------------------------------------------------------

        @Override
        public void mouseEntered(final MouseEvent e) {
            lblDescriptionValue.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }

        @Override
        public void mouseExited(final MouseEvent e) {
            lblDescriptionValue.setCursor(null);
        }

        @Override
        public void mouseClicked(final MouseEvent e) {
            final String url = DownscalingScenario.getDetailLink(lstScenarios.getSelectedValue().toString());

            try {
                BrowserLauncher.openURL(url);
            } catch (final Exception ex) {
                LOG.warn("cannot open link", ex); // NOI18N
            }
        }
    }
}
