/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2010 mscholl
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * GridMultiplyOutputManagerUI.java
 *
 * Created on Nov 19, 2010, 1:45:42 PM
 */
package de.cismet.cids.custom.sudplan.multiply;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LinearRing;
import com.vividsolutions.jts.geom.impl.CoordinateArraySequence;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;

import java.io.IOException;
import java.io.StringWriter;

import java.util.ArrayList;
import java.util.Collection;

import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.SwingWorker;

import de.cismet.cids.dynamics.Disposable;

import de.cismet.cismap.commons.features.DefaultRasterDocumentFeature;
import de.cismet.cismap.commons.features.Feature;
import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.interaction.CismapBroker;

import de.cismet.tools.gui.Static2DTools;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class GridMultiplyOutputManagerUI extends javax.swing.JPanel implements Disposable {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(GridMultiplyOutputManagerUI.class);

    //~ Instance fields --------------------------------------------------------

    private final transient GridMultiplyOutputManager model;

    private transient Feature currentFeature;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jplGrid;
    private javax.swing.JSlider jslYears;
    private javax.swing.JToggleButton jtgShowInMap;
    private javax.swing.JTextPane jtpResults;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new GridMultiplyOutputManagerUI object.
     *
     * @param  model  DOCUMENT ME!
     */
    public GridMultiplyOutputManagerUI(final GridMultiplyOutputManager model) {
        initComponents();
        this.model = model;
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        if (LOG.isDebugEnabled()) {
            LOG.debug("init"); // NOI18N
        }
        EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    try {
                        final StringWriter sw = new StringWriter();
                        MultiplyHelper.gridToWriter(sw, model.getMultiplierGrid());
                        jtpResults.setText(sw.toString());
                    } catch (final IOException ex) {
                        jtpResults.setText(ex.toString());
                    } finally {
                        jtpResults.setCaretPosition(0);
                    }
                }
            });
        new GridPainter().execute();
    }

    @Override
    public void dispose() {
        removeFeature();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jtgShowInMap = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpResults = new javax.swing.JTextPane();
        jslYears = new javax.swing.JSlider();
        jplGrid = new ImagePanel();

        setMaximumSize(new java.awt.Dimension(1800, 1400));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1000, 500));
        setLayout(new java.awt.GridBagLayout());

        jtgShowInMap.setText(NbBundle.getMessage(
                GridMultiplyOutputManagerUI.class,
                "GridMultiplyOutputManagerUI.jtgShowInMap.text")); // NOI18N
        jtgShowInMap.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    jtgShowInMapActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(jtgShowInMap, gridBagConstraints);

        jtpResults.setEditable(false);
        jtpResults.setFocusCycleRoot(false);
        jtpResults.setFocusTraversalKeysEnabled(false);
        jtpResults.setFocusable(false);
        jtpResults.setPreferredSize(new java.awt.Dimension(350, 350));
        jtpResults.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jtpResults);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

        jslYears.setMajorTickSpacing(10);
        jslYears.setMaximum(2040);
        jslYears.setMinimum(1960);
        jslYears.setPaintLabels(true);
        jslYears.setPaintTicks(true);
        jslYears.setSnapToTicks(true);
        jslYears.setValue(2010);
        jslYears.addChangeListener(new javax.swing.event.ChangeListener() {

                @Override
                public void stateChanged(final javax.swing.event.ChangeEvent evt) {
                    jslYearsStateChanged(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jslYears, gridBagConstraints);

        jplGrid.setEnabled(false);
        jplGrid.setFocusTraversalKeysEnabled(false);
        jplGrid.setFocusable(false);
        jplGrid.setMaximumSize(new java.awt.Dimension(350, 350));
        jplGrid.setMinimumSize(new java.awt.Dimension(350, 350));
        jplGrid.setOpaque(false);
        jplGrid.setPreferredSize(new java.awt.Dimension(350, 350));
        jplGrid.setRequestFocusEnabled(false);
        jplGrid.setVerifyInputWhenFocusTarget(false);
        jplGrid.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jplGrid, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jslYearsStateChanged(final javax.swing.event.ChangeEvent evt) //GEN-FIRST:event_jslYearsStateChanged
    {                                                                          //GEN-HEADEREND:event_jslYearsStateChanged
        if (!((JSlider)evt.getSource()).getValueIsAdjusting()) {
            EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        try {
                            final StringWriter sw = new StringWriter();
                            MultiplyHelper.gridToWriter(sw, model.getMultiplierGrid());
                            jtpResults.setText(sw.toString());
                        } catch (final IOException ex) {
                            jtpResults.setText(ex.toString());
                        } finally {
                            jtpResults.setCaretPosition(0);
                        }
                    }
                });

            final GridPainter painter = new GridPainter();
            painter.execute();
        }
    } //GEN-LAST:event_jslYearsStateChanged

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jtgShowInMapActionPerformed(final java.awt.event.ActionEvent evt) //GEN-FIRST:event_jtgShowInMapActionPerformed
    {                                                                              //GEN-HEADEREND:event_jtgShowInMapActionPerformed
        if (jtgShowInMap.isSelected()) {
            Geometry geometry = null;
            try {
                geometry = model.getMultiplierGrid().getGeometry();
            } catch (IOException ex) {
                LOG.warn("cannot get grid from model", ex);                        // NOI18N
            }
            if (geometry == null) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("geometry not present, using default geometry");     // NOI18N
                }
                final GeometryFactory factory = new GeometryFactory();
                // luxemburg final Coordinate[] bbox = new Coordinate[5]; bbox[0] = new Coordinate(5.696622848510742,
                // 50.21313015596505); bbox[1] = new Coordinate(5.696622848510742, 49.42574040071602); bbox[2] = new
                // Coordinate(6.57270622253418, 49.42574040071602); bbox[3] = new Coordinate(6.57270622253418,
                // 50.21313015596505); bbox[4] = new Coordinate(5.696622848510742, 50.21313015596505); europe

                final Coordinate[] bbox = new Coordinate[5];
                bbox[0] = new Coordinate(1.8, 59.6);
                bbox[1] = new Coordinate(1.8, 39.8);
                bbox[2] = new Coordinate(21.6, 39.8);
                bbox[3] = new Coordinate(21.6, 59.6);
                bbox[4] = new Coordinate(1.8, 59.6);
                final LinearRing ring = new LinearRing(new CoordinateArraySequence(bbox), factory);
                geometry = factory.createPolygon(ring, new LinearRing[0]);
            }
            final BufferedImage image = Static2DTools.toBufferedImage(((ImagePanel)jplGrid).getImage());

            final MappingComponent mc = CismapBroker.getInstance().getMappingComponent();
            removeFeature();
            currentFeature = new DefaultRasterDocumentFeature(image, geometry);
            mc.getFeatureCollection().addFeature(currentFeature);
            final Collection<Feature> zoom = new ArrayList<Feature>(1);
            zoom.add(currentFeature);
            mc.zoomToAFeatureCollection(zoom, true, false);
        } else {
            removeFeature();
        }
    } //GEN-LAST:event_jtgShowInMapActionPerformed

    /**
     * DOCUMENT ME!
     */
    private void removeFeature() {
        if (currentFeature != null) {
            final MappingComponent mc = CismapBroker.getInstance().getMappingComponent();
            mc.getFeatureCollection().removeFeature(currentFeature);
        }
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class GridPainter extends SwingWorker<Image, Object> {

        //~ Methods ------------------------------------------------------------

        @Override
        protected Image doInBackground() throws Exception {
            return null; // RunHelper.gridToImage(model.getMultiplierGrid(), jslYears.getValue());
        }

        @Override
        protected void done() {
            try {
                ((ImagePanel)jplGrid).setImage(get());
                jtgShowInMapActionPerformed(null);
            } catch (final Exception ex) {
                LOG.error("could not set image", ex); // NOI18N
            } finally {
                jplGrid.repaint();
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    protected final class ImagePanel extends JPanel {

        //~ Instance fields ----------------------------------------------------

        private transient Image image;

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         *
         * @param  image  DOCUMENT ME!
         */
        public void setImage(final Image image) {
            this.image = image;
        }

        /**
         * DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         */
        public Image getImage() {
            return image;
        }

        @Override
        protected void paintComponent(final Graphics g) {
            if (image == null) {
                super.paintComponent(g);
            } else {
                final int panelHeight = getHeight();
                final int panelWidth = getWidth();

                final Image toDraw;
                if ((panelHeight == 0) || (panelWidth == 0)) {
                    toDraw = image;
                } else {
                    final double scaler = (panelWidth > panelHeight) ? (panelHeight / image.getHeight(null))
                                                                     : (panelWidth / image.getWidth(null));
                    final BufferedImage scale = new BufferedImage(panelWidth, panelHeight, BufferedImage.TYPE_INT_ARGB);
                    final AffineTransform transform = AffineTransform.getScaleInstance(scaler, scaler);
                    scale.createGraphics().drawImage(image, transform, null);
                    toDraw = scale;
                }

                g.drawImage(toDraw, 0, 0, GridMultiplyOutputManagerUI.this);
            }
        }
    }
}
