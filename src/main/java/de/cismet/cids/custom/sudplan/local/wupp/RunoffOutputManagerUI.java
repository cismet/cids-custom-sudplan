/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.local.wupp;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.Component;
import java.awt.EventQueue;

import java.io.IOException;

import java.util.Collections;
import java.util.Comparator;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import de.cismet.cids.custom.sudplan.geocpmrest.io.GeoCPMOutput;
import de.cismet.cids.custom.sudplan.geocpmrest.io.ResultsElement;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class RunoffOutputManagerUI extends JPanel {

    //~ Instance fields --------------------------------------------------------

    private final transient RunoffOutputManager model;

    private final transient ListSelectionListener listL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JEditorPane jepInfo;
    private javax.swing.JEditorPane jepMax;
    private javax.swing.JEditorPane jepResultsElement;
    private javax.swing.JEditorPane jepSubinfo;
    private javax.swing.JList jlsResultsElements;
    private javax.swing.JPanel jplInfo;
    private javax.swing.JPanel jplMax;
    private javax.swing.JPanel jplResultsElements;
    private javax.swing.JPanel jplSubinfo;
    private javax.swing.JTabbedPane jtpOutput;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form RunoffOutputManagerUI.
     *
     * @param  model  DOCUMENT ME!
     */
    public RunoffOutputManagerUI(final RunoffOutputManager model) {
        initComponents();

        this.model = model;
        this.listL = new UpdateListener();

        init();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    private void init() {
        jlsResultsElements.setCellRenderer(new ResultsElementListRenderer());
        jlsResultsElements.addListSelectionListener(WeakListeners.create(
                ListSelectionListener.class,
                listL,
                jlsResultsElements));

        try {
            final GeoCPMOutput output = model.getUR();

            final Runnable run = new Runnable() {

                    @Override
                    public void run() {
                        jepInfo.setText(output.geoCPMInfo.content);
                        jepMax.setText(output.geoCPMMax.content);
                        jepSubinfo.setText(output.geoCPMSubInfo.content);

                        Collections.sort(output.resultsElements, new Comparator<ResultsElement>() {

                                @Override
                                public int compare(final ResultsElement o1, final ResultsElement o2) {
                                    return o1.number - o2.number;
                                }
                            });

                        final DefaultListModel dlm = (DefaultListModel)jlsResultsElements.getModel();
                        for (final ResultsElement re : output.resultsElements) {
                            dlm.addElement(re);
                        }

                        jlsResultsElements.setSelectedIndex(0);
                    }
                };

            if (EventQueue.isDispatchThread()) {
                run.run();
            } else {
                EventQueue.invokeLater(run);
            }
        } catch (final IOException ex) {
            EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        jepInfo.setText("ERROR: " + ex); // NOI18N
                    }
                });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jtpOutput = new javax.swing.JTabbedPane();
        jplInfo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepInfo = new javax.swing.JEditorPane();
        jplSubinfo = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jepSubinfo = new javax.swing.JEditorPane();
        jplMax = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jepMax = new javax.swing.JEditorPane();
        jplResultsElements = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlsResultsElements = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jepResultsElement = new javax.swing.JEditorPane();

        setOpaque(false);
        setPreferredSize(null);
        setLayout(new java.awt.GridBagLayout());

        jplInfo.setOpaque(false);
        jplInfo.setLayout(new java.awt.GridBagLayout());

        jepInfo.setEditable(false);
        jepInfo.setPreferredSize(null);
        jScrollPane1.setViewportView(jepInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jplInfo.add(jScrollPane1, gridBagConstraints);

        jtpOutput.addTab(NbBundle.getMessage(
                RunoffOutputManagerUI.class,
                "RunoffOutputManagerUI.jplInfo.TabConstraints.tabTitle"),
            jplInfo); // NOI18N

        jplSubinfo.setOpaque(false);
        jplSubinfo.setLayout(new java.awt.GridBagLayout());

        jepSubinfo.setEditable(false);
        jepSubinfo.setPreferredSize(null);
        jScrollPane2.setViewportView(jepSubinfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jplSubinfo.add(jScrollPane2, gridBagConstraints);

        jtpOutput.addTab(NbBundle.getMessage(
                RunoffOutputManagerUI.class,
                "RunoffOutputManagerUI.jplSubinfo.TabConstraints.tabTitle"),
            jplSubinfo); // NOI18N

        jplMax.setOpaque(false);
        jplMax.setLayout(new java.awt.GridBagLayout());

        jepMax.setEditable(false);
        jepMax.setPreferredSize(null);
        jScrollPane3.setViewportView(jepMax);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jplMax.add(jScrollPane3, gridBagConstraints);

        jtpOutput.addTab(NbBundle.getMessage(
                RunoffOutputManagerUI.class,
                "RunoffOutputManagerUI.jplMax.TabConstraints.tabTitle"),
            jplMax); // NOI18N

        jplResultsElements.setOpaque(false);
        jplResultsElements.setLayout(new java.awt.GridBagLayout());

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setOpaque(false);

        jlsResultsElements.setBorder(javax.swing.BorderFactory.createTitledBorder(
                NbBundle.getMessage(
                    RunoffOutputManagerUI.class,
                    "RunoffOutputManagerUI.jlsResultsElements.border.title"))); // NOI18N
        jlsResultsElements.setModel(new DefaultListModel());
        jlsResultsElements.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlsResultsElements.setPreferredSize(null);
        jScrollPane4.setViewportView(jlsResultsElements);

        jSplitPane1.setLeftComponent(jScrollPane4);

        jepResultsElement.setBorder(javax.swing.BorderFactory.createTitledBorder(
                NbBundle.getMessage(
                    RunoffOutputManagerUI.class,
                    "RunoffOutputManagerUI.jepResultsElement.border.title"))); // NOI18N
        jepResultsElement.setEditable(false);
        jepResultsElement.setPreferredSize(null);
        jScrollPane5.setViewportView(jepResultsElement);

        jSplitPane1.setRightComponent(jScrollPane5);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jplResultsElements.add(jSplitPane1, gridBagConstraints);

        jtpOutput.addTab(NbBundle.getMessage(
                RunoffOutputManagerUI.class,
                "RunoffOutputManagerUI.jplResultsElements.TabConstraints.tabTitle"),
            jplResultsElements); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jtpOutput, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ResultsElementListRenderer extends DefaultListCellRenderer {

        //~ Methods ------------------------------------------------------------

        @Override
        public Component getListCellRendererComponent(final JList list,
                final Object value,
                final int index,
                final boolean isSelected,
                final boolean cellHasFocus) {
            final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            if ((comp instanceof JLabel) && (value instanceof ResultsElement)) {
                final JLabel label = (JLabel)comp;
                final ResultsElement re = (ResultsElement)value;
                label.setText("ResultsElement " + re.number); // NOI18N
            }

            return comp;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class UpdateListener implements ListSelectionListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void valueChanged(final ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                final ResultsElement re = (ResultsElement)jlsResultsElements.getSelectedValue();
                jepResultsElement.setText(re.content);
            }
        }
    }
}
