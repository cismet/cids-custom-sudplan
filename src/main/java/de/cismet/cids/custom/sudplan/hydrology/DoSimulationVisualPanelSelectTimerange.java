/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.hydrology;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import java.text.DateFormat;

import java.util.Date;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class DoSimulationVisualPanelSelectTimerange extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

    private final transient DoSimulationWizardPanelSelectTimerange model;
    private final transient PropertyChangeListener startL;
    private final transient PropertyChangeListener endL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient com.toedter.calendar.JDateChooser jdcEnd = new com.toedter.calendar.JDateChooser();
    private final transient com.toedter.calendar.JDateChooser jdcStart = new com.toedter.calendar.JDateChooser();
    private final transient javax.swing.JLabel lblEnd = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblStart = new javax.swing.JLabel();
    private final transient javax.swing.Box.Filler vFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
            new java.awt.Dimension(0, 0),
            new java.awt.Dimension(0, 32767));
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form DoSimulationVisualPanelSelectTimerange.
     *
     * @param  model  DOCUMENT ME!
     */
    public DoSimulationVisualPanelSelectTimerange(final DoSimulationWizardPanelSelectTimerange model) {
        this.model = model;
        this.startL = new DateChangeListener(true);
        this.endL = new DateChangeListener(false);

        initComponents();

        jdcStart.getDateEditor()
                .addPropertyChangeListener(WeakListeners.propertyChange(startL, jdcStart.getDateEditor()));
        jdcEnd.getDateEditor().addPropertyChangeListener(WeakListeners.propertyChange(endL, jdcEnd.getDateEditor()));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        if (model.getSelectedStartDate() == null) {
            jdcStart.setDate(model.getMinStartDate());
        } else {
            jdcStart.setDate(model.getSelectedStartDate());
        }

        if (model.getSelectedEndDate() == null) {
            jdcEnd.setDate(model.getMaxEndDate());
        } else {
            jdcEnd.setDate(model.getSelectedEndDate());
        }

        final DateFormat df = DateFormat.getDateInstance();
        lblStart.setToolTipText("Minimal Start Date: " + df.format(model.getMinStartDate()));
        lblEnd.setToolTipText("Maximal End Date: " + df.format(model.getMaxEndDate()));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setName(NbBundle.getMessage(
                DoSimulationVisualPanelSelectTimerange.class,
                "DoSimulationVisualPanelSelectTimerange.name")); // NOI18N
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        jdcStart.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        add(jdcStart, gridBagConstraints);

        jdcEnd.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jdcEnd, gridBagConstraints);

        lblStart.setText(NbBundle.getMessage(
                DoSimulationVisualPanelSelectTimerange.class,
                "DoSimulationVisualPanelSelectTimerange.lblStart.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        add(lblStart, gridBagConstraints);

        lblEnd.setText(NbBundle.getMessage(
                DoSimulationVisualPanelSelectTimerange.class,
                "DoSimulationVisualPanelSelectTimerange.lblEnd.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblEnd, gridBagConstraints);

        vFiller.setMaximumSize(new java.awt.Dimension(0, 32767));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(vFiller, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class DateChangeListener implements PropertyChangeListener {

        //~ Instance fields ----------------------------------------------------

        private final transient boolean startDate;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new DateChangeListener object.
         *
         * @param  startDate  DOCUMENT ME!
         */
        public DateChangeListener(final boolean startDate) {
            this.startDate = startDate;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public void propertyChange(final PropertyChangeEvent evt) {
            if ("date".equals(evt.getPropertyName())) { // NOI18N
                final Date newValue = (Date)evt.getNewValue();
                if (startDate) {
                    if (newValue.before(model.getMinStartDate())) {
                        jdcStart.setDate(model.getMinStartDate());
                    } else {
                        model.setSelectedStartDate(newValue);
                    }
                } else {
                    if (newValue.after(model.getMaxEndDate())) {
                        jdcEnd.setDate(model.getMaxEndDate());
                    } else {
                        model.setSelectedEndDate(newValue);
                    }
                }
            }
        }
    }
}
