/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan;

import java.awt.Component;

import java.util.List;

import javax.swing.DefaultListSelectionModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class IDFTablePanel extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

    private final transient IDFCurve curve;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblIDF;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form IDFTablePanel.
     *
     * @param  curve  DOCUMENT ME!
     */
    public IDFTablePanel(final IDFCurve curve) {
        this.curve = curve;

        initComponents();

        init();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    private void init() {
        tblIDF.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblIDF.getTableHeader().setReorderingAllowed(false);
        tblIDF.setCellSelectionEnabled(true);

        final List<Integer> frequencies = curve.getFrequencies();
        final Object[] columnHeaders = new Object[frequencies.size() + 1];
        columnHeaders[0] = "Duration / Frequency";
        System.arraycopy(frequencies.toArray(), 0, columnHeaders, 1, columnHeaders.length - 1);

        final DefaultTableModel dtm = new DefaultTableModel(curve.getDurationIntensityRows(), columnHeaders) {

                @Override
                public boolean isCellEditable(final int row, final int column) {
                    return false;
                }
            };
        tblIDF.setModel(dtm);

        final IDFCellRenderer renderer = new IDFCellRenderer();

        final TableColumnModel tcm = tblIDF.getColumnModel();
        for (int i = 0; i < tcm.getColumnCount(); ++i) {
            tcm.getColumn(i).setCellRenderer(renderer);
            tcm.getColumn(i).setHeaderRenderer(renderer);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        final java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        tblIDF = new javax.swing.JTable();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        tblIDF.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                    { null, null, null, null },
                    { null, null, null, null },
                    { null, null, null, null },
                    { null, null, null, null }
                },
                new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jScrollPane1.setViewportView(tblIDF);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private static final class IDFCellRenderer extends DefaultTableCellRenderer {

        //~ Methods ------------------------------------------------------------

        @Override
        public Component getTableCellRendererComponent(final JTable table,
                final Object value,
                final boolean isSelected,
                final boolean hasFocus,
                final int row,
                final int column) {
            final Component c;

            if ((column == 0) || (row == -1)) {
                final JButton b = new JButton(value.toString());
                if (column == 0) {
                    b.setHorizontalAlignment(JButton.RIGHT);
                } else {
                    b.setHorizontalAlignment(JButton.CENTER);
                }

                c = b;
            } else {
                c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (c instanceof JLabel) {
                    final JLabel label = (JLabel)c;

                    label.setHorizontalAlignment(JLabel.CENTER);
                }
            }

            return c;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private static final class IDFSelectionModel extends DefaultListSelectionModel {

        // TODO: tbd
    }
}
