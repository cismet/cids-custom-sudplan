/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2010 mscholl
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * MultiplyModelManagerUI.java
 *
 * Created on Nov 11, 2010, 8:36:44 AM
 */
package de.cismet.cids.custom.sudplan.multiply;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import java.awt.EventQueue;

import java.io.IOException;

import javax.swing.JOptionPane;

import de.cismet.cids.custom.sudplan.ProgressEvent;
import de.cismet.cids.custom.sudplan.ProgressListener;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class MultiplyModelManagerUI extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(MultiplyModelManagerUI.class);

    //~ Instance fields --------------------------------------------------------

    private final transient MultiplyModelManager model;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbnRun;
    private javax.swing.JProgressBar jpbStatus;
    private javax.swing.JLabel lblStatus;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form MultiplyModelManagerUI.
     *
     * @param  model  DOCUMENT ME!
     */
    public MultiplyModelManagerUI(final MultiplyModelManager model) {
        initComponents();
        this.model = model;
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        if (EventQueue.isDispatchThread()) {
            performInit();
        } else {
            EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        performInit();
                    }
                });
        }
    }

    /**
     * DOCUMENT ME!
     */
    private void performInit() {
        if (model.isStarted()) {
            jbnRun.setEnabled(false);
            if (model.isFinished()) {
                lblStatus.setText("Finished");
                btnCancel.setEnabled(false);
            } else {
                lblStatus.setText("Running...");
                btnCancel.setEnabled(true);
            }
        } else {
            lblStatus.setText("Runnable");
            jbnRun.setEnabled(true);
            btnCancel.setEnabled(false);
        }
        jpbStatus.setMaximum(0);
        jpbStatus.setValue(0);
        jpbStatus.setStringPainted(model.isStarted());
        jpbStatus.setIndeterminate(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jpbStatus = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jbnRun = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        jpbStatus.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 419;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
        add(jpbStatus, gridBagConstraints);

        jLabel1.setText(NbBundle.getMessage(MultiplyModelManagerUI.class, "MultiplyModelManagerUI.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        add(jLabel1, gridBagConstraints);

        jbnRun.setText(NbBundle.getMessage(MultiplyModelManagerUI.class, "MultiplyModelManagerUI.jbnRun.text")); // NOI18N
        jbnRun.setMaximumSize(new java.awt.Dimension(86, 29));
        jbnRun.setMinimumSize(new java.awt.Dimension(86, 29));
        jbnRun.setPreferredSize(new java.awt.Dimension(86, 29));
        jbnRun.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    jbnRunActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 5, 10);
        add(jbnRun, gridBagConstraints);

        btnCancel.setText(NbBundle.getMessage(MultiplyModelManagerUI.class, "MultiplyModelManagerUI.btnCancel.text")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnCancelActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 10, 5, 8);
        add(btnCancel, gridBagConstraints);

        lblStatus.setText(NbBundle.getMessage(MultiplyModelManagerUI.class, "MultiplyModelManagerUI.lblStatus.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(lblStatus, gridBagConstraints);
    }                                                                                                                  // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnCancelActionPerformed(final java.awt.event.ActionEvent evt) //GEN-FIRST:event_btnCancelActionPerformed
    {                                                                           //GEN-HEADEREND:event_btnCancelActionPerformed
                                                                                // TODO add your handling code here:
    }                                                                           //GEN-LAST:event_btnCancelActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jbnRunActionPerformed(final java.awt.event.ActionEvent evt) //GEN-FIRST:event_jbnRunActionPerformed
    {                                                                        //GEN-HEADEREND:event_jbnRunActionPerformed
        model.addProgressListener(new ExecutionListener());
        final Thread executer = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        try {
                            model.execute();
                        } catch (final IOException e) {
                            LOG.error("Could not execute model", e); // NOI18N
                            EventQueue.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        JOptionPane.showMessageDialog(
                                            MultiplyModelManagerUI.this,
                                            "could not execute model",
                                            "Execution Error",
                                            JOptionPane.ERROR_MESSAGE);
                                    }
                                });
                        }
                    }
                });
        jbnRun.setEnabled(false);
        executer.start();
    } //GEN-LAST:event_jbnRunActionPerformed

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @param    evt  DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ExecutionListener implements ProgressListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void progress(final ProgressEvent event) {
            if (EventQueue.isDispatchThread()) {
                handleProgress(event);
            } else {
                EventQueue.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            handleProgress(event);
                        }
                    });
            }
        }

        /**
         * DOCUMENT ME!
         *
         * @param  event  DOCUMENT ME!
         */
        private void handleProgress(final ProgressEvent event) {
            if (ProgressEvent.State.STARTED.equals(event.getState())) {
                lblStatus.setText("Started");
                jpbStatus.setIndeterminate(true);
            } else if (ProgressEvent.State.PROGRESSING.equals(event.getState())) {
                lblStatus.setText("Running...");
                jpbStatus.setMaximum(event.getMaxSteps());
                jpbStatus.setValue(event.getStep());
                jpbStatus.setStringPainted(true);
                jpbStatus.setIndeterminate(false);
            } else if (ProgressEvent.State.FINISHED.equals(event.getState())) {
                lblStatus.setText("Finished");
                jpbStatus.setMaximum(100);
                jpbStatus.setValue(100);
                jpbStatus.setIndeterminate(false);
                model.removeProgressListener(this);
            }
        }
    }
}
