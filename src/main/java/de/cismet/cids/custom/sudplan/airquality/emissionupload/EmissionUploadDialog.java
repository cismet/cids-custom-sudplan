/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.airquality.emissionupload;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import java.awt.EventQueue;

import javax.swing.SwingWorker;

import de.cismet.cids.custom.sudplan.commons.SudplanConcurrency;

import de.cismet.cids.dynamics.CidsBean;

/**
 * DOCUMENT ME!
 *
 * @author   jweintraut
 * @version  $Revision$, $Date$
 */
public class EmissionUploadDialog extends javax.swing.JDialog {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(EmissionUploadDialog.class);

    //~ Instance fields --------------------------------------------------------

    private transient CidsBean cidsBean;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler gluFiller;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JProgressBar prgUploading;
    private javax.swing.JSeparator sepControls;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form EmissionUploadDialog.
     *
     * @param  parent    DOCUMENT ME!
     * @param  cidsBean  DOCUMENT ME!
     */
    public EmissionUploadDialog(final java.awt.Frame parent, final CidsBean cidsBean) {
        super(parent, true);

        this.cidsBean = cidsBean;

        initComponents();

        uploadCidsBean();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        prgUploading = new javax.swing.JProgressBar();
        lblIcon = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        sepControls = new javax.swing.JSeparator();
        gluFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767));
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(EmissionUploadDialog.class, "EmissionUploadDialog.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(320, 200));
        setModal(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        prgUploading.setIndeterminate(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 5, 6);
        getContentPane().add(prgUploading, gridBagConstraints);

        lblIcon.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/sudplan/airquality/emissionupload/upload.png"))); // NOI18N
        lblIcon.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        getContentPane().add(lblIcon, gridBagConstraints);

        btnOK.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadDialog.class,
                "EmissionUploadDialog.btnOK.text")); // NOI18N
        btnOK.setEnabled(false);
        btnOK.setFocusPainted(false);
        btnOK.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnOKActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        getContentPane().add(btnOK, gridBagConstraints);

        lblMessage.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadDialog.class,
                "EmissionUploadDialog.lblMessage.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 3, 6);
        getContentPane().add(lblMessage, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(sepControls, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.5;
        getContentPane().add(gluFiller, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.5;
        getContentPane().add(filler1, gridBagConstraints);

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnOKActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnOKActionPerformed
        dispose();
    }                                                                         //GEN-LAST:event_btnOKActionPerformed

    /**
     * DOCUMENT ME!
     */
    private void uploadCidsBean() {
        EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    prgUploading.setIndeterminate(true);
                    prgUploading.setVisible(true);
                    lblMessage.setText(
                        NbBundle.getMessage(EmissionUploadDialog.class, "EmissionUploadDialog.lblMessage.waiting"));
                    btnOK.setText(NbBundle.getMessage(EmissionUploadDialog.class, "EmissionUploadDialog.btnOK.text"));
                    btnOK.setEnabled(false);

                    if (!(cidsBean.getProperty("uploaded") instanceof Boolean)
                                || !(cidsBean.getProperty("file") instanceof String)) {
                        LOG.info("CidsBean is invalid.");
                        prgUploading.setIndeterminate(false);
                        prgUploading.setVisible(false);
                        lblMessage.setText(
                            NbBundle.getMessage(
                                EmissionUploadDialog.class,
                                "EmissionUploadDialog.lblMessage.invalidCidsBean"));
                        btnOK.setText(NbBundle.getMessage(EmissionUploadDialog.class, "EmissionUploadDialog.btnOK"));
                        btnOK.setEnabled(true);

                        return;
                    }

                    if ((Boolean)cidsBean.getProperty("uploaded")) {
                        LOG.info("CidsBean is already uploaded.");
                        prgUploading.setIndeterminate(false);
                        prgUploading.setVisible(false);
                        lblMessage.setText(
                            NbBundle.getMessage(
                                EmissionUploadDialog.class,
                                "EmissionUploadDialog.lblMessage.alreadyUploaded"));
                        btnOK.setText(NbBundle.getMessage(EmissionUploadDialog.class, "EmissionUploadDialog.btnOK"));
                        btnOK.setEnabled(true);

                        return;
                    }

                    final SwingWorker<String, Void> upload = new Upload(cidsBean);
                    SudplanConcurrency.getSudplanGeneralPurposePool().submit(upload);
                }
            });
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private class Upload extends SwingWorker<String, Void> {

        //~ Instance fields ----------------------------------------------------

        private final transient CidsBean cidsBean;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new Upload object.
         *
         * @param  cidsBean  DOCUMENT ME!
         */
        public Upload(final CidsBean cidsBean) {
            this.cidsBean = cidsBean;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        protected String doInBackground() throws Exception {
            return EmissionUpload.upload(cidsBean);
        }

        @Override
        protected void done() {
            if (isCancelled()) {
                return;
            }

            prgUploading.setIndeterminate(false);
            prgUploading.setVisible(false);
            btnOK.setText(NbBundle.getMessage(EmissionUploadDialog.class, "EmissionUploadDialog.btnOK"));
            btnOK.setEnabled(true);

            final String response;
            try {
                response = get();
            } catch (final Exception ex) {
                LOG.warn("Couldn't get() the Upload swing worker.", ex);

                lblMessage.setText(NbBundle.getMessage(
                        EmissionUploadDialog.class,
                        "EmissionUploadDialog.lblMessage.exception"));

                return;
            }

            if ("ok".equalsIgnoreCase(response)) {
                lblMessage.setText(NbBundle.getMessage(
                        EmissionUploadDialog.class,
                        "EmissionUploadDialog.lblMessage.success"));
                try {
                    cidsBean.setProperty("uploaded", true);
                    cidsBean.persist();
                } catch (final Exception ex) {
                    LOG.warn("Couldn't set the uploaded flag in emission database.", ex);
                }
            } else {
                lblMessage.setText(NbBundle.getMessage(
                        EmissionUploadDialog.class,
                        "EmissionUploadDialog.lblMessage.uploadFailed",
                        response));
            }
        }
    }
}
