/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.airquality.emissionupload;

import org.apache.log4j.Logger;

import org.openide.util.WeakListeners;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * DOCUMENT ME!
 *
 * @author   jweintraut
 * @version  $Revision$, $Date$
 */
public class EmissionUploadVisualPanelUpload extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(EmissionUploadVisualPanelUpload.class);

    //~ Instance fields --------------------------------------------------------

    private final transient EmissionUploadPanelUpload model;
    private final transient ChangeModelListener changeModelListener;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrAction;
    private javax.swing.Box.Filler gluFiller;
    private javax.swing.JLabel lblNote;
    private javax.swing.JRadioButton rdoSave;
    private javax.swing.JRadioButton rdoUpload;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form EmissionUploadVisualPanelUpload.
     *
     * @param  model  DOCUMENT ME!
     */
    public EmissionUploadVisualPanelUpload(final EmissionUploadPanelUpload model) {
        this.model = model;
        this.changeModelListener = new ChangeModelListener();

        initComponents();

        rdoUpload.addActionListener(WeakListeners.create(ActionListener.class, changeModelListener, rdoUpload));
        rdoSave.addActionListener(WeakListeners.create(ActionListener.class, changeModelListener, rdoSave));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgrAction = new javax.swing.ButtonGroup();
        gluFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767));
        lblNote = new javax.swing.JLabel();
        rdoUpload = new javax.swing.JRadioButton();
        rdoSave = new javax.swing.JRadioButton();

        setName(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelUpload.class,
                "EmissionUploadVisualPanelUpload.name_1")); // NOI18N
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        add(gluFiller, gridBagConstraints);

        lblNote.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelUpload.class,
                "EmissionUploadVisualPanelUpload.lblNote.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        add(lblNote, gridBagConstraints);

        bgrAction.add(rdoUpload);
        rdoUpload.setSelected(true);
        rdoUpload.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelUpload.class,
                "EmissionUploadVisualPanelUpload.rdoUpload.text"));                                              // NOI18N
        rdoUpload.setFocusPainted(false);
        rdoUpload.setIcon(new javax.swing.ImageIcon(
                getClass().getResource(
                    "/de/cismet/cids/custom/sudplan/airquality/emissionupload/upload_deselected.png")));         // NOI18N
        rdoUpload.setSelectedIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/sudplan/airquality/emissionupload/upload.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(rdoUpload, gridBagConstraints);

        bgrAction.add(rdoSave);
        rdoSave.setText(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelUpload.class,
                "EmissionUploadVisualPanelUpload.rdoSave.text"));                                              // NOI18N
        rdoSave.setFocusPainted(false);
        rdoSave.setIcon(new javax.swing.ImageIcon(
                getClass().getResource(
                    "/de/cismet/cids/custom/sudplan/airquality/emissionupload/save_deselected.png")));         // NOI18N
        rdoSave.setSelectedIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/sudplan/airquality/emissionupload/save.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 11, 5);
        add(rdoSave, gridBagConstraints);
    }                                                                                                          // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     */
    void init() {
        final String action = model.getAction();

        rdoSave.setSelected(EmissionUploadWizardAction.PROPERTY_ACTION_SAVE.equals(action));
        rdoUpload.setSelected(EmissionUploadWizardAction.PROPERTY_ACTION_UPLOAD.equals(action));
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private class ChangeModelListener implements ActionListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void actionPerformed(final ActionEvent e) {
            if (e.getSource().equals(rdoSave)) {
                model.setAction(EmissionUploadWizardAction.PROPERTY_ACTION_SAVE);
            } else if (e.getSource().equals(rdoUpload)) {
                model.setAction(EmissionUploadWizardAction.PROPERTY_ACTION_UPLOAD);
            }
        }
    }
}
