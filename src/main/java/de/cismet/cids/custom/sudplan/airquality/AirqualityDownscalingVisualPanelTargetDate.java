/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.airquality;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import java.util.Date;
import java.util.GregorianCalendar;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public final class AirqualityDownscalingVisualPanelTargetDate extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

    private final transient AirqualityDownscalingWizardPanelTargetDate model;
    private final transient PropertyChangeListener propL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private com.toedter.calendar.JDateChooser jdcEndDate;
    private com.toedter.calendar.JDateChooser jdcStartDate;
    private javax.swing.JLabel lblEndDate;
    private javax.swing.JLabel lblStartDate;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form AirqualityDownscalingVisualPanelScenarios.
     *
     * @param  model  DOCUMENT ME!
     */
    public AirqualityDownscalingVisualPanelTargetDate(final AirqualityDownscalingWizardPanelTargetDate model) {
        this.model = model;
        this.propL = new PropertyChangeListenerImpl();

        // name of the wizard step
        this.setName(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelTargetDate.class,
                "AirqualityDownscalingVisualPanelTargetDate.this.name")); // NOI18N

        initComponents();

        jdcStartDate.addPropertyChangeListener(WeakListeners.propertyChange(propL, jdcStartDate));
        jdcEndDate.addPropertyChangeListener(WeakListeners.propertyChange(propL, jdcEndDate));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    Date getSelectedStartDate() {
        return jdcStartDate.getDate();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    Date getSelectedEndDate() {
        return jdcEndDate.getDate();
    }

    /**
     * DOCUMENT ME!
     */
    void init() {
        final Date startDate = model.getStartDate();
        final Date endDate = model.getEndDate();

        if ((startDate == null) || (endDate == null)) {
            // FIXME: ATR hack to pre-populate fields
            // final Date now = new GregorianCalendar().getTime();
            final Date start = new GregorianCalendar(1965, 0, 1, 0, 0, 0).getTime();
            final Date end = new GregorianCalendar(2095, 11, 31, 23, 59, 59).getTime();

            jdcStartDate.setDate(start);
            jdcEndDate.setDate(end);
        } else {
            jdcStartDate.setDate(startDate);
            jdcEndDate.setDate(endDate);
        }

        model.fireChangeEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblStartDate = new javax.swing.JLabel();
        lblEndDate = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jdcStartDate = new com.toedter.calendar.JDateChooser();
        jdcEndDate = new com.toedter.calendar.JDateChooser();

        setMinimumSize(new java.awt.Dimension(200, 150));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(450, 300));
        setLayout(new java.awt.GridBagLayout());

        lblStartDate.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelTargetDate.class,
                "AirqualityDownscalingVisualPanelTargetDate.lblStartDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 14, 14, 14);
        add(lblStartDate, gridBagConstraints);

        lblEndDate.setText(NbBundle.getMessage(
                AirqualityDownscalingVisualPanelTargetDate.class,
                "AirqualityDownscalingVisualPanelTargetDate.lblEndDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 14, 14, 14);
        add(lblEndDate, gridBagConstraints);

        jPanel1.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        jdcStartDate.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(jdcStartDate, gridBagConstraints);

        jdcEndDate.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(jdcEndDate, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class PropertyChangeListenerImpl implements PropertyChangeListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void propertyChange(final PropertyChangeEvent evt) {
            model.fireChangeEvent();
        }
    }
}
