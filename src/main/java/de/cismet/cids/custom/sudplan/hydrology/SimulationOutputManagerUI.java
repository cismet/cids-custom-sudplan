/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.hydrology;

import org.apache.log4j.Logger;

import java.awt.BorderLayout;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.swing.JLabel;
import javax.swing.JTabbedPane;
import javax.swing.SwingWorker;

import de.cismet.cids.custom.sudplan.SMSUtils;
import de.cismet.cids.custom.sudplan.TimeseriesChartPanel;
import de.cismet.cids.custom.sudplan.TimeseriesRetrieverConfig;
import de.cismet.cids.custom.sudplan.commons.SudplanConcurrency;

import de.cismet.cids.dynamics.CidsBean;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class SimulationOutputManagerUI extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    /** LOGGER. */
    private static final transient Logger LOG = Logger.getLogger(SimulationOutputManagerUI.class);

    //~ Instance fields --------------------------------------------------------

    private final transient SimulationOutputManager model;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.cids.custom.sudplan.LoadingLabel lblLoading;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form SimulationOutputManagerUI.
     *
     * @param  model  DOCUMENT ME!
     */
    public SimulationOutputManagerUI(final SimulationOutputManager model) {
        this.model = model;

        initComponents();

        init();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    private void init() {
        final SwingWorker<Collection<TimeseriesRetrieverConfig>, Void> worker =
            new SwingWorker<Collection<TimeseriesRetrieverConfig>, Void>() {

                @Override
                protected Collection<TimeseriesRetrieverConfig> doInBackground() throws Exception {
                    final SimulationOutput output = model.getUR();

                    final List<TimeseriesRetrieverConfig> cfgs = new ArrayList<TimeseriesRetrieverConfig>(6);
                    for (final Integer tsId : output.getResultTsIds()) {
                        final CidsBean tsBean = SMSUtils.fetchCidsBean(tsId, SMSUtils.TABLENAME_TIMESERIES);
                        final String url = (String)tsBean.getProperty("uri"); // NOI18N
                        final TimeseriesRetrieverConfig cfg = TimeseriesRetrieverConfig.fromUrl(url);

                        cfgs.add(cfg);
                    }

                    return cfgs;
                }

                @Override
                protected void done() {
                    try {
                        final Collection<TimeseriesRetrieverConfig> cfgs = get();
                        final JTabbedPane tbpResults = new JTabbedPane(JTabbedPane.TOP, JTabbedPane.WRAP_TAB_LAYOUT);
                        for (final TimeseriesRetrieverConfig cfg : cfgs) {
                            final TimeseriesChartPanel tcp = new TimeseriesChartPanel(cfg, false);
                            tbpResults.addTab(cfg.getObservedProperty().getLocalisedName(), null, tcp);
                        }

                        remove(lblLoading);
                        lblLoading.dispose();
                        setLayout(new BorderLayout());
                        add(tbpResults, BorderLayout.CENTER);
                        invalidate();
                        validate();
                    } catch (final Exception e) {
                        final String message = "cannot create output visualisation"; // NOI18N
                        LOG.error(message, e);

                        remove(lblLoading);
                        lblLoading.dispose();
                        setLayout(new BorderLayout());
                        add(new JLabel(message + ": " + e), BorderLayout.CENTER); // NOI18N
                    }
                }
            };

        SudplanConcurrency.getSudplanGeneralPurposePool().execute(worker);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        final java.awt.GridBagConstraints gridBagConstraints;

        lblLoading = new de.cismet.cids.custom.sudplan.LoadingLabel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        add(lblLoading, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents
}
