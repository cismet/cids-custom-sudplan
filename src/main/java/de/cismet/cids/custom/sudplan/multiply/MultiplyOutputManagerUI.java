/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2010 mscholl
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * MultiplyOutputManagerUI.java
 *
 * Created on Nov 12, 2010, 4:32:59 PM
 */
package de.cismet.cids.custom.sudplan.multiply;

import org.apache.log4j.Logger;

import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;

import java.awt.Graphics;
import java.awt.Image;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;

import java.net.URL;

import java.text.MessageFormat;

import java.util.List;

import javax.imageio.ImageIO;

import javax.swing.JPanel;
import javax.swing.SwingWorker;

import de.cismet.security.WebAccessManager;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class MultiplyOutputManagerUI extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(MultiplyOutputManagerUI.class);

    //~ Instance fields --------------------------------------------------------

    /** Creates new form MultiplyOutputManagerUI. */
    private final transient MultiplyOutputManager model;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox jcbChartType;
    private javax.swing.JPanel jplChart;
    private javax.swing.JTextPane jtpRequestURL;
    private javax.swing.JTextPane jtpResults;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new MultiplyOutputManagerUI object.
     *
     * @param  model  DOCUMENT ME!
     */
    public MultiplyOutputManagerUI(final MultiplyOutputManager model) {
        initComponents();
        this.model = model;
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        new ChartRetriever().execute();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jcbChartType = new javax.swing.JComboBox();
        jplChart = new ImagePanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpResults = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpRequestURL = new javax.swing.JTextPane();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        jcbChartType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Colored Bars", "Line chart" }));
        jcbChartType.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 9, 9, 9);
        add(jcbChartType, gridBagConstraints);

        jplChart.setMaximumSize(new java.awt.Dimension(350, 350));
        jplChart.setOpaque(false);
        jplChart.setPreferredSize(new java.awt.Dimension(350, 350));

        final org.jdesktop.layout.GroupLayout jplChartLayout = new org.jdesktop.layout.GroupLayout(jplChart);
        jplChart.setLayout(jplChartLayout);
        jplChartLayout.setHorizontalGroup(
            jplChartLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 74, Short.MAX_VALUE));
        jplChartLayout.setVerticalGroup(
            jplChartLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 203, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 9, 9, 9);
        add(jplChart, gridBagConstraints);

        jLabel2.setText(NbBundle.getMessage(MultiplyOutputManagerUI.class, "MultiplyOutputManagerUI.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 9, 9, 1);
        add(jLabel2, gridBagConstraints);

        jtpResults.setDragEnabled(false);
        jtpResults.setEnabled(false);
        jtpResults.setMaximumSize(new java.awt.Dimension(350, 350));
        jtpResults.setMinimumSize(new java.awt.Dimension(50, 50));
        jtpResults.setPreferredSize(new java.awt.Dimension(350, 350));
        jScrollPane1.setViewportView(jtpResults);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(9, 9, 9, 9);
        add(jScrollPane1, gridBagConstraints);

        jtpRequestURL.setEditable(false);
        jScrollPane2.setViewportView(jtpRequestURL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jScrollPane2, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ImagePanel extends JPanel {

        //~ Instance fields ----------------------------------------------------

        private transient Image image;

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         *
         * @param  image  DOCUMENT ME!
         */
        public void setImage(final Image image) {
            this.image = image;
        }
        @Override
        protected void paintComponent(final Graphics g) {
            if (image == null) {
                super.paintComponent(g);
            } else {
                g.drawImage(image, 0, 0, MultiplyOutputManagerUI.this);
            }
        }
    }
    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ChartRetriever extends SwingWorker<Image, String> {

        //~ Static fields/initializers -----------------------------------------

        private static final String BAR_URL =
            "http://chart.apis.google.com/chart?chxt=x,y&chxr=1,0,{3}&cht=bvs&chs={0}x{1}&chd=t:{2}&chco=FFC6A5%7CFFFF42%7CDEF3BD%7C00A5C6%7CDEBDDE";

        //~ Instance fields ----------------------------------------------------

        private transient List<Double> results;

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         *
         * @throws  Exception  DOCUMENT ME!
         */
        @Override
        protected Image doInBackground() throws Exception {
            results = MultiplyHelper.doublesFromFile(new File(model.getLocation()));
            final StringBuilder sb = new StringBuilder();

            Double max = 0d;
            for (final Double result : results) {
                if (result > max) {
                    max = result;
                }
            }

            final double factor = 100 / max;

            for (final Double result : results) {
                sb.append(result * factor).append(',');
            }
            sb.deleteCharAt(sb.length() - 1);

            final String request = MessageFormat.format(
                    BAR_URL,
                    350,
                    350,
                    sb.toString(),
                    max);
            publish(request);

            Image image;

            try {
                final URL url = new URL(request);
                final InputStream stream = WebAccessManager.getInstance().doRequest(url);
                image = ImageIO.read(new BufferedInputStream(stream));
            } catch (final Exception e) {
                LOG.error("could not load image", e);                                                 // NOI18N
                image = ImageUtilities.loadImage("de/cismet/cids/custom/sudplan/multiply/error.png"); // NOI18N
            }

            return image;
        }

        /**
         * DOCUMENT ME!
         *
         * @param  list  DOCUMENT ME!
         */
        @Override
        protected void process(final List<String> list) {
            jtpRequestURL.setText(list.get(0));
        }

        /**
         * DOCUMENT ME!
         */
        @Override
        protected void done() {
            try {
                ((ImagePanel)jplChart).setImage(get());
                final StringBuilder sb = new StringBuilder();
                for (final Double result : results) {
                    sb.append(result).append('\n');
                }
                jtpResults.setText(sb.toString());
            } catch (final Exception ex) {
                LOG.error("could not set image", ex); // NOI18N
            } finally {
                jplChart.repaint();
            }
        }
    }
}
