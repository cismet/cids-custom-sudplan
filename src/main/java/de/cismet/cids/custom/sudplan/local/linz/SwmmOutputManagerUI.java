/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * SwmmOutputManagerUI.java
 *
 * Created on 07.12.2011, 15:18:55
 */
package de.cismet.cids.custom.sudplan.local.linz;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import java.awt.Color;
import java.awt.Component;

import java.io.IOException;

import java.util.ArrayList;

import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import de.cismet.cids.custom.objectrenderer.sudplan.LinzCsoRenderer;

/**
 * DOCUMENT ME!
 *
 * @author   Pascal Dih√©
 * @version  $Revision$, $Date$
 */
public class SwmmOutputManagerUI extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(SwmmOutputManagerUI.class);

    //~ Instance fields --------------------------------------------------------

    private final transient SwmmOutputManager outputManager;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable csoTable;
    private javax.swing.JScrollPane csoTableScrollPane;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form SwmmOutputManagerUI.
     *
     * @param  outputManager  DOCUMENT ME!
     */
    public SwmmOutputManagerUI(final SwmmOutputManager outputManager) {
        // TODO: Better Visualisation (Charts?), Links to CSOs

        this.outputManager = outputManager;
        initComponents();
        init();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    protected void init() {
        try {
            final SwmmOutput swmmOutput = outputManager.getUR();
            final ArrayList<CsoOverflow> csoOverflows = new ArrayList<CsoOverflow>(swmmOutput.getCsoOverflows().size());
            csoOverflows.addAll(swmmOutput.getCsoOverflows().values());
            final CsoTableModel csoTableModel = new CsoTableModel(csoOverflows);
            this.csoTable.setModel(csoTableModel);
            final CsoTableCellRenderer csoTableCellRenderer = new CsoTableCellRenderer();
            this.csoTable.setDefaultRenderer(String.class, new CsoTableCellRenderer());
            this.csoTable.setDefaultRenderer(Float.class, new CsoTableCellRenderer());
        } catch (IOException ex) {
            LOG.error("cannot initialise swmm output manager ui", ex); // NOI18N
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        csoTableScrollPane = new javax.swing.JScrollPane();
        csoTable = new javax.swing.JTable();

        csoTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {},
                new String[] {}));
        csoTableScrollPane.setViewportView(csoTable);

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addContainerGap().addComponent(
                    csoTableScrollPane,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    380,
                    Short.MAX_VALUE).addContainerGap()));
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addContainerGap().addComponent(
                    csoTableScrollPane,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    278,
                    Short.MAX_VALUE).addContainerGap()));
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class CsoTableCellRenderer extends DefaultTableCellRenderer {

        //~ Methods ------------------------------------------------------------

        @Override
        public Component getTableCellRendererComponent(final JTable table,
                final Object value,
                final boolean isSelected,
                final boolean hasFocus,
                final int row,
                final int column) {
            final Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            final Object volume = csoTable.getModel().getValueAt(row, 1);
            if ((volume != null) && (((Float)volume).floatValue() <= 0f)) {
                cell.setBackground(Color.GREEN);
            } else {
                cell.setBackground(Color.WHITE);
            }
            return cell;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class CsoTableModel extends AbstractTableModel {

        //~ Instance fields ----------------------------------------------------

        final ArrayList<CsoOverflow> csoOverflows;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new CsoTableModel object.
         *
         * @param  csoOverflows  DOCUMENT ME!
         */
        public CsoTableModel(final ArrayList<CsoOverflow> csoOverflows) {
            this.csoOverflows = csoOverflows;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public int getRowCount() {
            return this.csoOverflows.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Class<?> getColumnClass(final int columnIndex) {
            switch (columnIndex) {
                case 0: {
                    return String.class;
                }
                case 1: {
                    return Float.class;
                }
                case 2: {
                    return Float.class;
                }
                default: {
                    return Object.class;
                }
            }
        }

        @Override
        public String getColumnName(final int columnIndex) {
            switch (columnIndex) {
                case 0: {
                    return NbBundle.getMessage(SwmmOutputManagerUI.class, "SwmmOutputManagerUI.column.name");
                }
                case 1: {
                    return NbBundle.getMessage(SwmmOutputManagerUI.class, "SwmmOutputManagerUI.column.volume");
                }
                case 2: {
                    return NbBundle.getMessage(SwmmOutputManagerUI.class, "SwmmOutputManagerUI.column.frequency");
                }
                default: {
                    return "";
                }
            }
        }

        @Override
        public Object getValueAt(final int rowIndex, final int columnIndex) {
            switch (columnIndex) {
                case 0: {
                    return this.csoOverflows.get(rowIndex).getName();
                }
                case 1: {
                    return this.csoOverflows.get(rowIndex).getOverflowVolume();
                }
                case 2: {
                    return this.csoOverflows.get(rowIndex).getOverflowFrequency();
                }
                default: {
                    return -1;
                }
            }
        }
    }
}
