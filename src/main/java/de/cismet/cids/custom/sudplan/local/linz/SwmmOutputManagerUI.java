/*
 * Copyright (C) 2011 cismet GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * SwmmOutputManagerUI.java
 *
 * Created on 07.12.2011, 15:18:55
 */
package de.cismet.cids.custom.sudplan.local.linz;

import java.io.IOException;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;

/**
 *
 * @author Pascal Dih√©
 */
public class SwmmOutputManagerUI extends javax.swing.JPanel {

    private static final transient Logger LOG = Logger.getLogger(SwmmOutputManagerUI.class);

    //~ Instance fields --------------------------------------------------------

    private final transient SwmmOutputManager outputManager;
    
    /** Creates new form SwmmOutputManagerUI */
    public SwmmOutputManagerUI(SwmmOutputManager outputManager) {
        
        // TODO: Better Visualisation (Charts?), Links to CSOs

        this.outputManager = outputManager;
        initComponents();
        init();
    }
    
    protected void init()
    {
        try {
            final SwmmOutput swmmOutput = outputManager.getUR();
            DefaultTableModel ctoTableModel = (DefaultTableModel)this.csoTable.getModel();
            for(SwmmOutput.CsoOverflow csoOverflow:swmmOutput.getCsoOverflows().values())
            {
                ctoTableModel.addRow(new Object[]{
                csoOverflow.getName(), csoOverflow.getOverflowVolume(), 
                csoOverflow.getOverflowFrequency(), csoOverflow.getOverflowFrequency()});
            }
        } catch (IOException ex) {
             LOG.error("cannot initialise swmm output manager ui", ex); // NOI18N
        }
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        csoTableScrollPane = new javax.swing.JScrollPane();
        csoTable = new javax.swing.JTable();

        csoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CSO", "Volumen", "Frequenz", "Dauer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        csoTableScrollPane.setViewportView(csoTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(csoTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(csoTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable csoTable;
    private javax.swing.JScrollPane csoTableScrollPane;
    // End of variables declaration//GEN-END:variables
}
