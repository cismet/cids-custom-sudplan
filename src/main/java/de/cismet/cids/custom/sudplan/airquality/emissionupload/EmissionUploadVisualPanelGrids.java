/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.airquality.emissionupload;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import java.awt.Component;
import java.awt.EventQueue;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;

import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionListener;

/**
 * DOCUMENT ME!
 *
 * @author   jweintraut
 * @version  $Revision$, $Date$
 */
public class EmissionUploadVisualPanelGrids extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(EmissionUploadVisualPanelGrids.class);

    //~ Instance fields --------------------------------------------------------

    private EmissionUploadPanelGrids model;
    private DefaultListModel lstGridsModel;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddGrid;
    private javax.swing.JButton btnRemoveGrid;
    private javax.swing.JButton btnSaveGrid;
    private javax.swing.JList lstGrids;
    private de.cismet.cids.custom.sudplan.airquality.emissionupload.EmissionUploadVisualPanelGridSpecification pnlGrid;
    private javax.swing.JPanel pnlList;
    private javax.swing.JPanel pnlListControls;
    private javax.swing.JScrollPane scpGrids;
    private javax.swing.JSplitPane splContainer;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form EmissionUploadVisualPanelGridSpecification.
     *
     * @param  model  listener DOCUMENT ME!
     */
    public EmissionUploadVisualPanelGrids(final EmissionUploadPanelGrids model) {
        this.model = model;
        lstGridsModel = new DefaultListModel();

        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        splContainer = new javax.swing.JSplitPane();
        pnlList = new javax.swing.JPanel();
        scpGrids = new javax.swing.JScrollPane();
        lstGrids = new javax.swing.JList();
        pnlListControls = new javax.swing.JPanel();
        btnSaveGrid = new javax.swing.JButton();
        btnAddGrid = new javax.swing.JButton();
        btnRemoveGrid = new javax.swing.JButton();
        pnlGrid = new EmissionUploadVisualPanelGridSpecification(model);

        setName(org.openide.util.NbBundle.getMessage(
                EmissionUploadVisualPanelGrids.class,
                "EmissionUploadVisualPanelGrids.name")); // NOI18N
        setLayout(new java.awt.BorderLayout());

        splContainer.setBorder(null);
        splContainer.setDividerSize(0);
        splContainer.setResizeWeight(0.75);

        pnlList.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pnlList.setLayout(new java.awt.BorderLayout());

        scpGrids.setBorder(null);

        lstGrids.setModel(lstGridsModel);
        lstGrids.setCellRenderer(new GridRenderer());
        lstGrids.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

                @Override
                public void valueChanged(final javax.swing.event.ListSelectionEvent evt) {
                    lstGridsValueChanged(evt);
                }
            });
        scpGrids.setViewportView(lstGrids);

        pnlList.add(scpGrids, java.awt.BorderLayout.CENTER);

        pnlListControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING));

        btnSaveGrid.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/sudplan/airquality/emissionupload/edit_save.png"))); // NOI18N
        btnSaveGrid.setEnabled(false);
        btnSaveGrid.setFocusPainted(false);
        btnSaveGrid.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnSaveGridActionPerformed(evt);
                }
            });
        pnlListControls.add(btnSaveGrid);

        btnAddGrid.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/sudplan/airquality/emissionupload/edit_add.png"))); // NOI18N
        btnAddGrid.setEnabled(false);
        btnAddGrid.setFocusPainted(false);
        btnAddGrid.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnAddGridActionPerformed(evt);
                }
            });
        pnlListControls.add(btnAddGrid);

        btnRemoveGrid.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/sudplan/airquality/emissionupload/edit_delete.png"))); // NOI18N
        btnRemoveGrid.setEnabled(false);
        btnRemoveGrid.setFocusPainted(false);
        btnRemoveGrid.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnRemoveGridActionPerformed(evt);
                }
            });
        pnlListControls.add(btnRemoveGrid);

        pnlList.add(pnlListControls, java.awt.BorderLayout.PAGE_END);

        splContainer.setRightComponent(pnlList);
        splContainer.setLeftComponent(pnlGrid);

        add(splContainer, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnAddGridActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnAddGridActionPerformed
        lstGrids.clearSelection();
    }                                                                              //GEN-LAST:event_btnAddGridActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnSaveGridActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnSaveGridActionPerformed
        final Grid grid = pnlGrid.saveGrid();

        if (!lstGridsModel.contains(grid)) {
            lstGridsModel.addElement(grid);
        }

        showSelectedGrid();
        model.setGrids(getGrids());
    } //GEN-LAST:event_btnSaveGridActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnRemoveGridActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnRemoveGridActionPerformed
        final ListSelectionListener[] listeners = lstGrids.getListSelectionListeners();

        for (final ListSelectionListener listener : listeners) {
            lstGrids.removeListSelectionListener(listener);
        }

        final Object[] selectedValues = lstGrids.getSelectedValues();
        for (final Object selectedValue : selectedValues) {
            lstGridsModel.removeElement(selectedValue);
        }

        for (final ListSelectionListener listener : listeners) {
            lstGrids.addListSelectionListener(listener);
        }

        showSelectedGrid();
        model.setGrids(getGrids());
    } //GEN-LAST:event_btnRemoveGridActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void lstGridsValueChanged(final javax.swing.event.ListSelectionEvent evt) { //GEN-FIRST:event_lstGridsValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }

        showSelectedGrid();
    } //GEN-LAST:event_lstGridsValueChanged

    /**
     * DOCUMENT ME!
     */
    protected void showSelectedGrid() {
        if (pnlGrid.isDirty() && btnSaveGrid.isEnabled()) {
            // We want to avoid saving invalid information.
            final int saveGrid = JOptionPane.showConfirmDialog(
                    this,
                    NbBundle.getMessage(
                        EmissionUploadVisualPanelGrids.class,
                        "EmissionUploadVisualPanelGrids.showSelectedGrid().JOptionPane.confirmSave.message"), // NOI18N
                    NbBundle.getMessage(
                        EmissionUploadVisualPanelGrids.class,
                        "EmissionUploadVisualPanelGrids.showSelectedGrid().JOptionPane.confirmSave.title"), // NOI18N
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (saveGrid == JOptionPane.YES_OPTION) {
                pnlGrid.saveGrid();
            }
        }

        final int[] selectedIndices = lstGrids.getSelectedIndices();

        btnAddGrid.setEnabled(selectedIndices.length > 0);
        btnSaveGrid.setEnabled(false);
        btnRemoveGrid.setEnabled(selectedIndices.length > 0);

        pnlGrid.setEnabled(true);
        if (selectedIndices.length > 1) {
            pnlGrid.setEnabled(false);
        } else if (selectedIndices.length == 0) {
            pnlGrid.setGrid(new Grid());
        } else {
            pnlGrid.setGrid((Grid)lstGridsModel.elementAt(selectedIndices[0]));
        }

        revalidate();
        repaint();
    }

    /**
     * DOCUMENT ME!
     */
    public void reset() {
        pnlGrid.setGrid(new Grid());
        lstGrids.clearSelection();
        showSelectedGrid();
    }

    /**
     * DOCUMENT ME!
     *
     * @param  enabled  DOCUMENT ME!
     */
    public void enableSaveButton(final boolean enabled) {
        btnSaveGrid.setEnabled(enabled);
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public Collection<Grid> getGrids() {
        final Collection<Grid> result = new ArrayList<Grid>(lstGridsModel.size());

        final Enumeration grids = lstGridsModel.elements();
        while (grids.hasMoreElements()) {
            result.add((Grid)grids.nextElement());
        }

        return result;
    }

    /**
     * DOCUMENT ME!
     */
    void init() {
        lstGridsModel.clear();

        EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    for (final Grid grid : model.getGrids()) {
                        lstGridsModel.addElement(grid);
                    }

                    lstGrids.setSelectedIndex(0);
                }
            });
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    boolean isDirty() {
        return pnlGrid.isDirty();
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    protected class GridRenderer extends JLabel implements ListCellRenderer {

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new GridRenderer object.
         */
        public GridRenderer() {
            setOpaque(true);
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public Component getListCellRendererComponent(final JList list,
                final Object value,
                final int index,
                final boolean isSelected,
                final boolean cellHasFocus) {
            if (isSelected) {
                setBackground(UIManager.getDefaults().getColor("List.selectionBackground")); // NOI18N
                setForeground(UIManager.getDefaults().getColor("List.selectionForeground")); // NOI18N
            } else {
                setBackground(UIManager.getDefaults().getColor("List.background"));          // NOI18N
                setForeground(UIManager.getDefaults().getColor("List.foreground"));          // NOI18N
            }

            if (value instanceof Grid) {
                setText(((Grid)value).getGridName());
            }

            return this;
        }
    }
}
