/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.cismap3d;

import com.vividsolutions.jts.geom.Geometry;

import org.apache.log4j.Logger;

import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;
import org.openide.util.lookup.ServiceProvider;

import java.awt.BorderLayout;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;

import de.cismet.cids.custom.sudplan.SMSUtils;

import de.cismet.cismap.commons.XBoundingBox;
import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.interaction.CismapBroker;

import de.cismet.cismap.navigatorplugin.CismapPlugin;

import de.cismet.tools.gui.BasicGuiComponentProvider;
import de.cismet.tools.gui.CustomButtonProvider;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
@ServiceProvider(service = BasicGuiComponentProvider.class)
public class Cismap3DCanvas extends javax.swing.JPanel implements BasicGuiComponentProvider, CustomButtonProvider {

    //~ Static fields/initializers ---------------------------------------------

    public static final String CISMAP_3D_PANEL_ID = "cismet_3d_canvas"; // NOI18N

    /** LOGGER. */
    private static final transient Logger LOG = Logger.getLogger(Cismap3DCanvas.class);

    //~ Instance fields --------------------------------------------------------

    private final transient Icon icon;

    private final transient Canvas3D canvas3D;
    private final transient Layer3D layer3D;

    private final transient ActionListener homeL;
//    private final transient ActionListener toggleCamL;
    private final transient ActionListener toBBoxL;
    private final transient ActionListener fromBBoxL;

    private final transient DropTarget dropTarget;
    private transient DropTargetListener dropDelegate;

    // Variables declaration - do not modify

    // NOI18N

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblNo3D;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form Cismap3DCanvas.
     *
     * @throws  IllegalStateException  DOCUMENT ME!
     */
    public Cismap3DCanvas() {
        homeL = new HomeListener();
//        toggleCamL = new CameraToggleListener();
        toBBoxL = new ToBBoxListener();
        fromBBoxL = new FromBBoxListener();

        icon = SMSUtils.loadImageIcon(getClass(), "globe_16.png"); // NOI18N

        initComponents();

        canvas3D = Lookup.getDefault().lookup(Canvas3D.class);
        layer3D = Lookup.getDefault().lookup(Layer3D.class);

        if (canvas3D == null) {
            LOG.info("no canvas 3d implementation can be found"); // NOI18N

            dropTarget = null;
        } else {
            LOG.info("found canvas 3d implementation: " + canvas3D); // NOI18N

            if (layer3D == null) {
                throw new IllegalStateException("canvas 3D without layer 3D illegal"); // NOI18N
            }

            removeAll();
            setLayout(new BorderLayout());
            add(canvas3D.getUI(), BorderLayout.CENTER);

            if (canvas3D instanceof DropTarget3D) {
                dropTarget = new DropTarget(this, (DropTarget3D)canvas3D);
            } else {
                if (LOG.isInfoEnabled()) {
                    LOG.info("drop target 3d not available for canvas 3d, ignoring drop events"); // NOI18N
                }

                dropTarget = null;
            }
        }
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblNo3D = new javax.swing.JLabel();

        setName(NbBundle.getMessage(Cismap3DCanvas.class, "Cismap3DCanvas.name")); // NOI18N
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        lblNo3D.setFont(new java.awt.Font("Lucida Grande", 1, 48));                                              // NOI18N
        lblNo3D.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNo3D.setText(NbBundle.getMessage(Cismap3DCanvas.class, "Cismap3DCanvas.lblNo3D.text"));               // NOI18N
        lblNo3D.setToolTipText(NbBundle.getMessage(Cismap3DCanvas.class, "Cismap3DCanvas.lblNo3D.toolTipText")); // NOI18N
        lblNo3D.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(lblNo3D, java.awt.BorderLayout.CENTER);
    }                                                                                                            // </editor-fold>//GEN-END:initComponents

    @Override
    public String getId() {
        return CISMAP_3D_PANEL_ID;
    }

    @Override
    public String getDescription() {
        return "Cismap 3D Visualisation Panel";
    }

    @Override
    public Icon getIcon() {
        return icon;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public GuiType getType() {
        return GuiType.GUICOMPONENT;
    }

    @Override
    public Object getPositionHint() {
        return CismapPlugin.ViewSection.MAP;
    }

    @Override
    public void setLinkObject(final Object link) {
        // what's this good for
    }

    @Override
    public Collection<JComponent> getCustomButtons() {
        final List<JComponent> list = new ArrayList<JComponent>(3);

        final JButton home = createButton("home_16.gif", homeL); // NOI18N
//        final JButton toggleCam = createButton("camera_toggle_16.png", toggleCamL); // NOI18N
        final JButton toBBox = createButton("to_bbox_16.png", toBBoxL);       // NOI18N
        final JButton fromBBox = createButton("from_bbox_16.png", fromBBoxL); // NOI18N

        list.add(toBBox);
        list.add(fromBBox);
//        list.add(toggleCam);
        list.add(home);

        return Collections.unmodifiableList(list);
    }

    /**
     * DOCUMENT ME!
     *
     * @param   iconName  DOCUMENT ME!
     * @param   actionL   DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private JButton createButton(final String iconName, final ActionListener actionL) {
        final ImageIcon imageIcon = SMSUtils.loadImageIcon(getClass(), iconName);
        final JButton button = new JButton(imageIcon);
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.addActionListener(WeakListeners.create(ActionListener.class, actionL, button));

        return button;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  IllegalStateException  DOCUMENT ME!
     */
    private Geometry getCurrent2DBBox() {
        final MappingComponent mc = CismapBroker.getInstance().getMappingComponent();

        final XBoundingBox bbox;
        if (mc.getCurrentBoundingBox() instanceof XBoundingBox) {
            bbox = (XBoundingBox)mc.getCurrentBoundingBox();
        } else {
            throw new IllegalStateException("MappingComponent must be capable of sending XBoundingBox"); // NOI18N
        }

        return bbox.getGeometry();
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ToBBoxListener implements ActionListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void actionPerformed(final ActionEvent e) {
            canvas3D.setBoundingBox(getCurrent2DBBox());
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class FromBBoxListener implements ActionListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void actionPerformed(final ActionEvent e) {
            final MappingComponent mc = CismapBroker.getInstance().getMappingComponent();
            final XBoundingBox bbox = new XBoundingBox(canvas3D.getBoundingBox());
            mc.gotoBoundingBoxWithHistory(bbox);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class HomeListener implements ActionListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void actionPerformed(final ActionEvent e) {
            canvas3D.home();
        }
    }
}
