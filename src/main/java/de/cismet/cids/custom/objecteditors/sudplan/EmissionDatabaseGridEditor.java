/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.objecteditors.sudplan;

import org.apache.log4j.Logger;

import org.jdesktop.swingx.JXErrorPane;
import org.jdesktop.swingx.error.ErrorInfo;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.EventQueue;

import java.io.File;

import java.util.logging.Level;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import de.cismet.cids.custom.sudplan.AbstractCidsBeanRenderer;
import de.cismet.cids.custom.sudplan.airquality.emissionupload.EmissionUpload;
import de.cismet.cids.custom.sudplan.airquality.emissionupload.GridHeight;
import de.cismet.cids.custom.sudplan.airquality.emissionupload.Substance;
import de.cismet.cids.custom.sudplan.airquality.emissionupload.TimeVariation;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.editors.EditorClosedEvent;
import de.cismet.cids.editors.EditorSaveListener;

import de.cismet.tools.Converter;

/**
 * DOCUMENT ME!
 *
 * @author   jweintraut
 * @version  $Revision$, $Date$
 */
public class EmissionDatabaseGridEditor extends AbstractCidsBeanRenderer implements EditorSaveListener {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(EmissionDatabaseGridEditor.class);

    //~ Instance fields --------------------------------------------------------

    private final transient boolean editable;
    private transient boolean dirty = false;
    private final transient DocumentListener setDirtyListener;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrHeight;
    private javax.swing.ButtonGroup bgrTimeVariation;
    private javax.swing.JButton btnReadCustomTimeVariation;
    private javax.swing.JButton btnReadEmissionGrid;
    private javax.swing.JComboBox cmbSubstance;
    private javax.swing.Box.Filler gluEmissionGrid;
    private javax.swing.Box.Filler gluHeight;
    private javax.swing.JLabel lblEmissionGrid;
    private javax.swing.JLabel lblEmissionGridName;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblSubstance;
    private javax.swing.JLabel lblTimeVariation;
    private javax.swing.JPanel pnlHeight;
    private javax.swing.JPanel pnlTimeVariationCustom;
    private javax.swing.JRadioButton rdoHeight0m;
    private javax.swing.JRadioButton rdoHeight160m;
    private javax.swing.JRadioButton rdoHeight40m;
    private javax.swing.JRadioButton rdoHeight80m;
    private javax.swing.JRadioButton rdoTimeVariationConstant;
    private javax.swing.JRadioButton rdoTimeVariationCustom;
    private javax.swing.JRadioButton rdoTimeVariationTraffic;
    private javax.swing.JTextField txtEmissionGridName;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form EmissionDatabaseGridEditor.
     */
    public EmissionDatabaseGridEditor() {
        this(true);
    }

    /**
     * Creates a new EmissionDatabaseGridEditor object.
     *
     * @param  editable  DOCUMENT ME!
     */
    public EmissionDatabaseGridEditor(final boolean editable) {
        this.editable = editable;

        initComponents();

        enableControls(editable);

        setDirtyListener = new SetDirtyListener();
        txtEmissionGridName.getDocument()
                .addDocumentListener(WeakListeners.document(setDirtyListener, txtEmissionGridName.getDocument()));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        bgrTimeVariation = new javax.swing.ButtonGroup();
        bgrHeight = new javax.swing.ButtonGroup();
        lblSubstance = new javax.swing.JLabel();
        lblHeight = new javax.swing.JLabel();
        rdoTimeVariationConstant = new javax.swing.JRadioButton();
        cmbSubstance = new javax.swing.JComboBox();
        lblEmissionGridName = new javax.swing.JLabel();
        pnlHeight = new javax.swing.JPanel();
        rdoHeight0m = new javax.swing.JRadioButton();
        rdoHeight40m = new javax.swing.JRadioButton();
        rdoHeight80m = new javax.swing.JRadioButton();
        rdoHeight160m = new javax.swing.JRadioButton();
        gluHeight = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 0));
        txtEmissionGridName = new javax.swing.JTextField();
        gluEmissionGrid = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767));
        lblTimeVariation = new javax.swing.JLabel();
        rdoTimeVariationTraffic = new javax.swing.JRadioButton();
        pnlTimeVariationCustom = new javax.swing.JPanel();
        rdoTimeVariationCustom = new javax.swing.JRadioButton();
        btnReadCustomTimeVariation = new javax.swing.JButton();
        lblEmissionGrid = new javax.swing.JLabel();
        btnReadEmissionGrid = new javax.swing.JButton();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        lblSubstance.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.lblSubstance.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblSubstance, gridBagConstraints);

        lblHeight.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.lblHeight.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblHeight, gridBagConstraints);

        bgrTimeVariation.add(rdoTimeVariationConstant);
        rdoTimeVariationConstant.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.rdoTimeVariationConstant.text")); // NOI18N
        rdoTimeVariationConstant.setOpaque(false);
        rdoTimeVariationConstant.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    rdoTimeVariationConstantActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 2, 5);
        add(rdoTimeVariationConstant, gridBagConstraints);

        cmbSubstance.setModel(new DefaultComboBoxModel(Substance.values()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cmbSubstance, gridBagConstraints);

        lblEmissionGridName.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.lblEmissionGridName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblEmissionGridName, gridBagConstraints);

        pnlHeight.setOpaque(false);
        pnlHeight.setLayout(new java.awt.GridBagLayout());

        bgrHeight.add(rdoHeight0m);
        rdoHeight0m.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.rdoHeight0m.text")); // NOI18N
        rdoHeight0m.setOpaque(false);
        rdoHeight0m.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    rdoHeight0mActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        pnlHeight.add(rdoHeight0m, gridBagConstraints);

        bgrHeight.add(rdoHeight40m);
        rdoHeight40m.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.rdoHeight40m.text")); // NOI18N
        rdoHeight40m.setOpaque(false);
        rdoHeight40m.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    rdoHeight40mActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlHeight.add(rdoHeight40m, gridBagConstraints);

        bgrHeight.add(rdoHeight80m);
        rdoHeight80m.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.rdoHeight80m.text")); // NOI18N
        rdoHeight80m.setOpaque(false);
        rdoHeight80m.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    rdoHeight80mActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlHeight.add(rdoHeight80m, gridBagConstraints);

        bgrHeight.add(rdoHeight160m);
        rdoHeight160m.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.rdoHeight160m.text")); // NOI18N
        rdoHeight160m.setOpaque(false);
        rdoHeight160m.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    rdoHeight160mActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        pnlHeight.add(rdoHeight160m, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        pnlHeight.add(gluHeight, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(pnlHeight, gridBagConstraints);

        final org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.name}"),
                txtEmissionGridName,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtEmissionGridName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        add(gluEmissionGrid, gridBagConstraints);

        lblTimeVariation.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.lblTimeVariation.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblTimeVariation, gridBagConstraints);

        bgrTimeVariation.add(rdoTimeVariationTraffic);
        rdoTimeVariationTraffic.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.rdoTimeVariationTraffic.text")); // NOI18N
        rdoTimeVariationTraffic.setOpaque(false);
        rdoTimeVariationTraffic.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    rdoTimeVariationTrafficActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        add(rdoTimeVariationTraffic, gridBagConstraints);

        pnlTimeVariationCustom.setOpaque(false);
        pnlTimeVariationCustom.setLayout(new java.awt.GridBagLayout());

        bgrTimeVariation.add(rdoTimeVariationCustom);
        rdoTimeVariationCustom.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.rdoTimeVariationCustom.text")); // NOI18N
        rdoTimeVariationCustom.setOpaque(false);
        rdoTimeVariationCustom.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    rdoTimeVariationCustomActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 5, 5);
        pnlTimeVariationCustom.add(rdoTimeVariationCustom, gridBagConstraints);

        btnReadCustomTimeVariation.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.btnReadCustomTimeVariation.text")); // NOI18N
        btnReadCustomTimeVariation.setFocusPainted(false);
        btnReadCustomTimeVariation.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnReadCustomTimeVariationActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 5, 5);
        pnlTimeVariationCustom.add(btnReadCustomTimeVariation, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        add(pnlTimeVariationCustom, gridBagConstraints);

        lblEmissionGrid.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.lblEmissionGrid.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblEmissionGrid, gridBagConstraints);

        btnReadEmissionGrid.setText(org.openide.util.NbBundle.getMessage(
                EmissionDatabaseGridEditor.class,
                "EmissionDatabaseGridEditor.btnReadEmissionGrid.text")); // NOI18N
        btnReadEmissionGrid.setFocusPainted(false);
        btnReadEmissionGrid.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnReadEmissionGridActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(btnReadEmissionGrid, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnReadEmissionGridActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnReadEmissionGridActionPerformed
        askForFileAndReadIt("grid");
        setDirty();
    }                                                                                       //GEN-LAST:event_btnReadEmissionGridActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnReadCustomTimeVariationActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnReadCustomTimeVariationActionPerformed
        askForFileAndReadIt("customtimevariation");
        setDirty();
    }                                                                                              //GEN-LAST:event_btnReadCustomTimeVariationActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void rdoTimeVariationConstantActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_rdoTimeVariationConstantActionPerformed
        setDirty();
    }                                                                                            //GEN-LAST:event_rdoTimeVariationConstantActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void rdoTimeVariationTrafficActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_rdoTimeVariationTrafficActionPerformed
        setDirty();
    }                                                                                           //GEN-LAST:event_rdoTimeVariationTrafficActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void rdoTimeVariationCustomActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_rdoTimeVariationCustomActionPerformed
        setDirty();
    }                                                                                          //GEN-LAST:event_rdoTimeVariationCustomActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void rdoHeight0mActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_rdoHeight0mActionPerformed
        setDirty();
    }                                                                               //GEN-LAST:event_rdoHeight0mActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void rdoHeight40mActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_rdoHeight40mActionPerformed
        setDirty();
    }                                                                                //GEN-LAST:event_rdoHeight40mActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void rdoHeight80mActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_rdoHeight80mActionPerformed
        setDirty();
    }                                                                                //GEN-LAST:event_rdoHeight80mActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void rdoHeight160mActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_rdoHeight160mActionPerformed
        setDirty();
    }                                                                                 //GEN-LAST:event_rdoHeight160mActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  cidsBean  DOCUMENT ME!
     * @param  uploaded  DOCUMENT ME!
     */
    public void setCidsBean(final CidsBean cidsBean, final boolean uploaded) {
        setCidsBean(cidsBean);

        btnReadEmissionGrid.setEnabled(editable && !uploaded);
        btnReadCustomTimeVariation.setEnabled(editable && !uploaded);
    }

    @Override
    protected void init() {
        bindingGroup.unbind();

        if (cidsBean != null) {
            final Object timeVariationObj = cidsBean.getProperty("timevariation");
            if (timeVariationObj instanceof String) {
                final String timeVariation = (String)timeVariationObj;

                rdoTimeVariationConstant.setSelected(TimeVariation.CONSTANT.getRepresentationFile().equals(
                        timeVariation));
                rdoTimeVariationTraffic.setSelected(TimeVariation.TRAFFIC.getRepresentationFile().equals(
                        timeVariation));
                rdoTimeVariationCustom.setSelected(TimeVariation.CUSTOM.getRepresentationFile().equals(timeVariation));
            } else {
                bgrTimeVariation.clearSelection();
            }

            final Object gridHeightObj = cidsBean.getProperty("height");
            if (gridHeightObj instanceof String) {
                final String gridHeight = (String)gridHeightObj;

                rdoHeight0m.setSelected(GridHeight.ZERO.getRepresentationFile().equals(gridHeight));
                rdoHeight40m.setSelected(GridHeight.FORTY.getRepresentationFile().equals(gridHeight));
                rdoHeight80m.setSelected(GridHeight.EIGHTY.getRepresentationFile().equals(gridHeight));
                rdoHeight160m.setSelected(GridHeight.HUNDREDSIXTY.getRepresentationFile().equals(gridHeight));
            } else {
                bgrHeight.clearSelection();
            }

            final Object substanceObj = cidsBean.getProperty("substance");
            if (substanceObj instanceof String) {
                final Substance substance = Substance.substanceFor((String)substanceObj);

                cmbSubstance.setSelectedItem(substance);
            } else {
                cmbSubstance.setSelectedIndex(0);
            }
        } else {
            clearControls();
        }

        enableControls(editable);

        bindingGroup.bind();

        dirty = false;
    }

    @Override
    public void editorClosed(final EditorClosedEvent event) {
        // NoOp
    }

    @Override
    public boolean prepareForSave() {
        try {
            cidsBean.setProperty("substance", ((Substance)cmbSubstance.getSelectedItem()).getRepresentationFile());

            if (rdoHeight0m.isSelected()) {
                cidsBean.setProperty("height", GridHeight.ZERO.getRepresentationFile());
            } else if (rdoHeight40m.isSelected()) {
                cidsBean.setProperty("height", GridHeight.FORTY.getRepresentationFile());
            } else if (rdoHeight80m.isSelected()) {
                cidsBean.setProperty("height", GridHeight.EIGHTY.getRepresentationFile());
            } else if (rdoHeight160m.isSelected()) {
                cidsBean.setProperty("height", GridHeight.HUNDREDSIXTY.getRepresentationFile());
            }

            if (rdoTimeVariationConstant.isSelected()) {
                cidsBean.setProperty("timevariation", TimeVariation.CONSTANT.getRepresentationFile());
            } else if (rdoTimeVariationTraffic.isSelected()) {
                cidsBean.setProperty("timevariation", TimeVariation.TRAFFIC.getRepresentationFile());
            } else if (rdoTimeVariationCustom.isSelected()) {
                cidsBean.setProperty("timevariation", TimeVariation.CUSTOM.getRepresentationFile());
            }
        } catch (final Exception ex) {
            LOG.warn("Couldn't save emission grid '" + txtEmissionGridName.getText() + "'.", ex);
            return false;
        }

        return true;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public boolean isDirty() {
        return dirty;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  editable  DOCUMENT ME!
     */
    private void enableControls(final boolean editable) {
        cmbSubstance.setEnabled(editable);
        txtEmissionGridName.setEditable(editable);
        rdoHeight0m.setEnabled(editable);
        rdoHeight40m.setEnabled(editable);
        rdoHeight80m.setEnabled(editable);
        rdoHeight160m.setEnabled(editable);
        rdoTimeVariationConstant.setEnabled(editable);
        rdoTimeVariationTraffic.setEnabled(editable);
        rdoTimeVariationCustom.setEnabled(editable);
        btnReadCustomTimeVariation.setEnabled(editable);
        btnReadEmissionGrid.setEnabled(editable);
    }

    /**
     * DOCUMENT ME!
     */
    private void clearControls() {
        cmbSubstance.setSelectedIndex(0);
        txtEmissionGridName.setText("");
        bgrHeight.clearSelection();
        bgrTimeVariation.clearSelection();
        btnReadCustomTimeVariation.setEnabled(false);
        btnReadEmissionGrid.setEnabled(false);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  property  DOCUMENT ME!
     */
    private void askForFileAndReadIt(final String property) {
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        final int userDecision = fileChooser.showDialog(
                this,
                NbBundle.getMessage(
                    EmissionDatabaseGridEditor.class,
                    "EmissionDatabaseGridEditor.askForFileAndReadIt(String).fileChooser.button"));

        if (userDecision != JFileChooser.APPROVE_OPTION) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Opening file for property '" + property + "' cancelled by user.");
            }
            return;
        }

        final File file = fileChooser.getSelectedFile();
        try {
            cidsBean.setProperty(property, Converter.toString(EmissionUpload.read(file)));
        } catch (final Exception ex) {
            final String errorMessage = "Couldn't read from given file '" + file
                        + "' to write its contents into CidsBean property '" + property + "'.";

            LOG.warn(errorMessage, ex);

            try {
                final ErrorInfo errorInfo = new ErrorInfo(
                        "Error",
                        "An error occurred while reading, converting or setting the given file.",
                        errorMessage,
                        "ERROR",
                        ex,
                        Level.SEVERE,
                        null);

                EventQueue.invokeAndWait(new Runnable() {

                        @Override
                        public void run() {
                            JXErrorPane.showDialog(EmissionDatabaseGridEditor.this, errorInfo);
                        }
                    });
            } catch (final Exception ex1) {
                LOG.error("cannot display error dialog", ex1); // NOI18N
            }
        }
    }

    /**
     * DOCUMENT ME!
     */
    void persistDisplayedEmissionGrid() {
        if (!prepareForSave()) {
            LOG.warn("Emission grid '" + txtEmissionGridName.getText()
                        + "' could be in an invalid state. Something went wrong while setting its attributes.");
            return;
        }

        try {
            cidsBean.persist();
            dirty = false;
        } catch (final Exception ex) {
            LOG.warn("Couldn't persist emission grid '" + txtEmissionGridName.getText() + "'.", ex);
        }
    }

    /**
     * DOCUMENT ME!
     */
    private void setDirty() {
        dirty = true;
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private class SetDirtyListener implements DocumentListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            setDirty();
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            setDirty();
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            setDirty();
        }
    }
}
